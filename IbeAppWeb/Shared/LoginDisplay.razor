@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<AuthorizeView>
    <Authorized>
        Hello, @context.User.Identity?.Name!
        <ul>
            @foreach (var role in roles)
            {
                <li>Role: @role</li>
            }
        </ul>
        <button class="nav-link btn btn-link" @onclick="BeginLogout">Log out</button>
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code{
    private ClaimsPrincipal user;
    private List<string> roles = new();

    private void BeginLogout(MouseEventArgs args)
    {
        Navigation.NavigateToLogout("authentication/logout");
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            roles = user.FindAll("roles").Select(r => r.Value).ToList();

            // Optional: fallback if roles use a different claim type
            if (!roles.Any())
            {
                roles = user.FindAll(ClaimTypes.Role).Select(r => r.Value).ToList();
            }
        }
    }
}
