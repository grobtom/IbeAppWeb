@page "/monteure"
@using IbeAppWeb.DTOs
@using IbeAppWeb.DTOs.Monteur
@using IbeAppWeb.Services
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Spinner
@inject MonteurService MonteurService
@inject IbeToastService ToastService

<h3>Monteur Management</h3>
@if (isLoading)
{
    <div id="container">
        <SfSpinner @bind-Visible="@isLoading" Label="Loading...." Type="@SpinnerType.Bootstrap">
        </SfSpinner>
    </div>
}
else
{
    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                <SfGrid @ref="Grid" DataSource="@Data" AllowPaging="true" Toolbar="@(new List<string>() { "Edit", "Delete", "Cancel" })">
                    <GridPageSettings PageCount="5" PageSizes="true" PageSize="10"></GridPageSettings>
                    <GridEditSettings AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog"></GridEditSettings>
                    <GridEvents TValue="MonteurResponse" OnActionBegin="OnActionBegin"></GridEvents>
                    <GridTemplates>
                        <DetailTemplate Context="context">
                            @{
                                var monteur = context as MonteurResponse;
                                var filteredProjects = Projects.Where(p => p.MonteurId == monteur.MonteurId).ToList();
                            }
                             <SfGrid DataSource="@filteredProjects" AllowPaging="true" AllowResizing="true" AllowTextWrap="true" AllowSorting="true" Height="300px">
                             <GridPageSettings PageCount="5"></GridPageSettings>
                                <GridColumns>
                                    <GridColumn Field="@nameof(ProjectMonteurDto.ProjectId)" HeaderText="ProjektId" Width="60"></GridColumn>
                                    <GridColumn Field="@nameof(ProjectMonteurDto.ProjectName)" HeaderText="Projekt" Width="150" AllowGrouping="false"></GridColumn>
                                    <GridColumn Field="@nameof(ProjectMonteurDto.BauleiterFullName)" HeaderText="Bauleiter" Format="d" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </DetailTemplate>
                    </GridTemplates>
                    <GridColumns>
                        <GridColumn Field=@nameof(MonteurResponse.MonteurId) HeaderText="Monteur ID" TextAlign="TextAlign.Left" Width="60" IsPrimaryKey="true"></GridColumn>
                        <GridColumn Field=@nameof(MonteurResponse.Vorname) HeaderText="Vorname" Width="150" ValidationRules="@(new ValidationRules { Required = true, MinLength = 3 })"></GridColumn>
                        <GridColumn Field=@nameof(MonteurResponse.Nachname) HeaderText="Nachname" Format="d" TextAlign="TextAlign.Left" Width="150"></GridColumn>
                        <GridColumn Field=@nameof(MonteurResponse.Email) HeaderText="E-Mail" Width="200" ValidationRules="@(new ValidationRules { Required = true, Email = true })"></GridColumn>
                        <GridColumn Field=@nameof(MonteurResponse.IsDeleted) HeaderText="Aktiv" TextAlign="TextAlign.Left" Width="80" AllowEditing="false">
                            <Template>
                                @{
                                    var data = context as MonteurResponse;
                                    var isActive = data != null && !data.IsDeleted;
                                }
                                <SfCheckBox Label="Aktiv" Value="false" @bind-Checked="@isActive"></SfCheckBox>
                            </Template>

                        </GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
        </div>
    </div>
}

<style>
    .e-grid .e-headercell {
        background-color: #a2d6f4;
        color: rgb(3, 2, 2);
    }
</style>

@code {

    private IEnumerable<MonteurResponse> Data { get; set; } = new List<MonteurResponse>();
    private SfGrid<MonteurResponse>? Grid;
    private bool isLoading = false;
    private Dictionary<string, string> fieldErrors = new();
    private List<ProjectMonteurDto> Projects = new List<ProjectMonteurDto>();


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            Data = await MonteurService.GetAllMonteure();
            Projects = await MonteurService.GetMonteurProjects();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Error loading data: {ex.Message}", false);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnActionBegin(ActionEventArgs<MonteurResponse> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            args.Cancel = true;
            if (args.Action == "Add")
            {
                await CustomAdd(args.Data);
            }
            else if (args.Action == "Edit")
            {
                await CustomUpdate(args.Data);
            }

            if(Grid != null)
            {
                await Grid.CloseEditAsync();
            }
            else
            {
                await ToastService.ShowToast("Grid is not initialized.", false);
            }

        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            await CustomDelete(args.Data);
        }        
    }

    private async Task CustomUpdate(MonteurResponse monteur)
    {
        try
        {
            var updatedMonteur = await MonteurService.UpdateMonteur(monteur);

            if (updatedMonteur != null)
            {
                await ToastService.ShowToast("Monteur erfolgreich aktualisiert.", true);
                Data = Enumerable.Empty<MonteurResponse>();
                await LoadData();
                StateHasChanged();
            }
            else
            {
                await ToastService.ShowToast("Fehler beim Aktualisieren des Monteurs. Bitte versuchen Sie es erneut.", false);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Aktualisieren des Monteurs: {ex.Message}", false);
        }
    }

    private async Task CustomDelete(MonteurResponse monteur)
    {
        try
        {
            var isDeleted = await MonteurService.DeleteMonteur(monteur.MonteurId);

            if (isDeleted)
            {
                await ToastService.ShowToast("Monteur erfolgreich gelöscht.", true);
                Data = Enumerable.Empty<MonteurResponse>();
                await LoadData();
                StateHasChanged();  
            }
            else
            {
                await ToastService.ShowToast("Fehler beim Löschen des Monteurs. Bitte versuchen Sie es erneut.", false);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Löschen des Monteurs: {ex.Message}", false);
        }
    }

    private async Task CustomAdd(MonteurResponse monteur)
    {
        try
        {
            var createdMonteur = await MonteurService.CreateMonteur(monteur, fieldErrors);

            if (createdMonteur != null)
            {
                await ToastService.ShowToast("Monteur erfolgreich hinzugefügt.", true);
                Data = Enumerable.Empty<MonteurResponse>();
                await LoadData();
                StateHasChanged();
            }
            else
            {
                await ToastService.ShowToast("Fehler beim Hinzufügen des Monteurs. Bitte versuchen Sie es erneut.", false);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Hinzufügen des Monteurs: {ex.Message}", false);
        }
    }

}

