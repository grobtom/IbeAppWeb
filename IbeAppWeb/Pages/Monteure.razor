@page "/monteure"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using IbeAppWeb.DTOs
@using IbeAppWeb.Services
@inject MonteurService MonteurService
@inject IbeToastService ToastService

<h3>Monteur Management</h3>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid @ref="Grid" DataSource="@Data" AllowPaging="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })">
                <GridPageSettings PageCount="5"></GridPageSettings>
                <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog"></GridEditSettings>
                <GridEvents TValue="MonteurResponse" OnActionBegin="OnActionBegin"></GridEvents>
                <GridColumns>
                    <GridColumn Field=@nameof(MonteurResponse.MonteurId) HeaderText="Monteur ID" TextAlign="TextAlign.Left" Width="60" IsPrimaryKey="true"></GridColumn>
                    <GridColumn Field=@nameof(MonteurResponse.Vorname) HeaderText="Vorname" Width="150" ValidationRules="@(new ValidationRules{ Required=true, MinLength=5 })"></GridColumn>
                    <GridColumn Field=@nameof(MonteurResponse.Nachname) HeaderText="Nachname" Format="d" TextAlign="TextAlign.Left" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(MonteurResponse.IsDeleted) HeaderText="Aktiv" TextAlign="TextAlign.Left" Width="80" AllowEditing="false">
                                                <Template>
                            @{
                                var data = context as MonteurResponse;
                                var isActive = !data.IsDeleted;
                            }
                            <SfCheckBox Label="Aktiv" Value="false" @bind-Checked="@isActive"></SfCheckBox>
                        </Template>                    

                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

<style>
    .e-grid .e-headercell {
        background-color: #a2d6f4;
        color: rgb(3, 2, 2);
    }
</style>

@code {

    private IEnumerable<MonteurResponse> Data { get; set; } = new List<MonteurResponse>();
    private SfGrid<MonteurResponse> Grid;


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            Data = await MonteurService.GetAllMonteure();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Error loading data: {ex.Message}", false);
        }
    }

    private async Task OnActionBegin(ActionEventArgs<MonteurResponse> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            args.Cancel = true;
            if (args.Action == "Add")
            {
                await CustomAdd(args.Data);
            }
            else if (args.Action == "Edit")
            {
                await CustomUpdate(args.Data);
            }
            await Grid.CloseEditAsync();
            await LoadData();
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            await CustomDelete(args.Data);
        }
    }

    private async Task CustomUpdate(MonteurResponse monteur)
    {
        try
        {
            var updatedMonteur = await MonteurService.UpdateMonteur(monteur.MonteurId, monteur);

            if (updatedMonteur != null)
            {
                await ToastService.ShowToast("Monteur erfolgreich aktualisiert.", true);
            }
            else
            {
                await ToastService.ShowToast("Fehler beim Aktualisieren des Monteurs. Bitte versuchen Sie es erneut.", false);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Aktualisieren des Monteurs: {ex.Message}", false);
        }
    }

    private async Task CustomDelete(MonteurResponse monteur)
    {
        try
        {
            var isDeleted = await MonteurService.DeleteMonteur(monteur.MonteurId);

            if (isDeleted)
            {
                await ToastService.ShowToast("Monteur erfolgreich gelöscht.", true);

                await LoadData();
            }
            else
            {
                await ToastService.ShowToast("Fehler beim Löschen des Monteurs. Bitte versuchen Sie es erneut.", false);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Löschen des Monteurs: {ex.Message}", false);
        }
    }

    private async Task CustomAdd(MonteurResponse monteur)
    {
        try
        {
            var createdMonteur = await MonteurService.CreateMonteur(monteur);

            if (createdMonteur != null)
            {
                await ToastService.ShowToast("Monteur erfolgreich hinzugefügt.", true);

                await LoadData();
            }
            else
            {
                await ToastService.ShowToast("Fehler beim Hinzufügen des Monteurs. Bitte versuchen Sie es erneut.", false);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Hinzufügen des Monteurs: {ex.Message}", false);
        }
    }

}

