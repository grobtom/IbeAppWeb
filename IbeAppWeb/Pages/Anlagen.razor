@page "/anlagen"
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids
@using IbeAppWeb.DTOs
@using IbeAppWeb.Services
@using System.ComponentModel.DataAnnotations
@inject AnlagenService AnlagenService
@inject IbeToastService ToastService

<h3>Anlagen Management</h3>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid @ref="Grid" DataSource="@AnlagenData" AllowPaging="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })">
                <GridPageSettings PageCount="5"></GridPageSettings>
                <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Dialog"></GridEditSettings>
                <GridEvents TValue="AnlageDto" OnActionBegin="OnActionBegin"></GridEvents>
                <GridColumns>
                    <GridColumn Field=@nameof(AnlageDto.AnlageId) HeaderText="Anlage ID" TextAlign="TextAlign.Left" Width="60" IsPrimaryKey="true"></GridColumn>
                    <GridColumn Field=@nameof(AnlageDto.AnlageName) HeaderText="Anlage Kennzeichen" Width="100" ValidationRules="@(new ValidationRules{ Required=true, MinLength=5 })"></GridColumn>
                    <GridColumn Field=@nameof(AnlageDto.Beschreibung) HeaderText="Beschreibung" Format="d" TextAlign="TextAlign.Left" Width="200"></GridColumn>
                    <GridColumn Field=@nameof(AnlageDto.IsDeleted) HeaderText="Aktiv" TextAlign="TextAlign.Left" Width="80" AllowEditing="false">
                        <Template>
                            @{
                                var data = context as AnlageDto;
                                var isActive = !data.IsDeleted;
                            }
                            <SfCheckBox Label="Aktiv" Value="false" @bind-Checked="@isActive"></SfCheckBox>
                        </Template>                    
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>


@code {

    private IEnumerable<AnlageDto> AnlagenData { get; set; } = new List<AnlageDto>();
    private SfGrid<AnlageDto> Grid;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            AnlagenData = await AnlagenService.GetAllAnlagen();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Laden der Daten: {ex.Message}", false);
        }
    }

    private async Task OnActionBegin(ActionEventArgs<AnlageDto> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            args.Cancel = true; 
            if (args.Action == "Add")
            {
                await CustomAdd(args.Data);
            }
            else if (args.Action == "Edit")
            {
                await CustomUpdate(args.Data);
            }
            Grid.CloseEdit();
            await LoadData();
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            await CustomDelete(args.Data);
        }
    }

    private async Task CustomUpdate(AnlageDto anlage)
    {
        try
        {
            var updatedAnlage = await AnlagenService.UpdateAnlage(anlage.AnlageId, anlage);

            if (updatedAnlage != null)
            {
                await ToastService.ShowToast("Anlage erfolgreich aktualisiert.", true);
            }
            else
            {
                await ToastService.ShowToast("Fehler beim Aktualisieren der Anlage. Bitte versuchen Sie es erneut.", false);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Aktualisieren der Anlage: {ex.Message}", false);
        }
    }

    private async Task CustomDelete(AnlageDto anlage)
    {
        try
        {
            var isDeleted = await AnlagenService.DeleteAnlage(anlage.AnlageId);

            if (isDeleted)
            {
                await ToastService.ShowToast("Anlage erfolgreich gelöscht.", true);

                await LoadData();
            }
            else
            {
                await ToastService.ShowToast("Fehler beim Löschen der Anlage. Bitte versuchen Sie es erneut.", false);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Löschen der Anlage: {ex.Message}", false);
        }
    }

    private async Task CustomAdd(AnlageDto anlage)
    {
        try
        {
            var createdAnlage = await AnlagenService.CreateAnlage(anlage);

            if (createdAnlage != null)
            {
                await ToastService.ShowToast("Anlage erfolgreich hinzugefügt.", true);

                await LoadData();
            }
            else
            {
                await ToastService.ShowToast("Fehler beim Hinzufügen der Anlage. Bitte versuchen Sie es erneut.", false);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Hinzufügen der Anlage: {ex.Message}", false);
        }
    }

}
