@page "/monteuranlage"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using IbeAppWeb.DTOs
@using IbeAppWeb.Services
@inject MonteurService MonteurService
@inject AnlagenService AnlagenService
@inject IbeToastService ToastService

<h3>Monteur Anlage Management</h3>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid @ref="Grid" DataSource="@Data" AllowPaging="true">
                <GridPageSettings PageCount="5"></GridPageSettings>
                <GridEvents TValue="MonteurWithAnlageDto" RowSelected="OnRowSelected"></GridEvents>
                <GridColumns>
                    <GridColumn Field=@nameof(MonteurWithAnlageDto.MonteurId) HeaderText="Monteur ID" TextAlign="TextAlign.Left" Width="80" IsPrimaryKey="true"></GridColumn>
                    <GridColumn Field=@nameof(MonteurWithAnlageDto.Vorname) HeaderText="Vorname" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(MonteurWithAnlageDto.Nachname) HeaderText="Nachname" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(MonteurWithAnlageDto.AnlageId) HeaderText="Anlage ID" Width="100"></GridColumn>
                    <GridColumn Field=@nameof(MonteurWithAnlageDto.AnlageName) HeaderText="Anlage Name" Width="200"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>

        <div class="row mt-4">
            <h4>Assign/Reassign Monteur to Anlage</h4>
            <div class="form-group">
                <label for="monteurSelect">Select Monteur:</label>
                <SfDropDownList TItem="MonteurResponse" TValue="int" PopupHeight="230px" Placeholder="wähle Monteur" @bind-Value="@SelectedMonteurId" DataSource="@Monteure">
                    <DropDownListFieldSettings Text="FullName" Value="MonteurId" />
                </SfDropDownList>
            </div>
            <div class="form-group mt-3">
                <label for="anlageSelect">Select Anlage:</label>
                <SfDropDownList TItem="AnlageDto" TValue="int" DataSource="@Anlagen" Placeholder="Wähle Anlage" @bind-Value="SelectedAnlageId"> 
                    <DropDownListFieldSettings Text = "AnlageName" Value = "AnlageId" />
                </SfDropDownList>
            </div>
            <div class="form-group mt-3">
                <SfButton CssClass="e-primary" OnClick="AssignMonteurToAnlage">Assign/Reassign</SfButton>
            </div>
        </div>
    </div>
</div>

<style>
    .e-grid .e-headercell {
        background-color: #a2d6f4;
        color: rgb(3, 2, 2);
    }
</style>

@code {
    private IEnumerable<MonteurWithAnlageDto> Data { get; set; } = new List<MonteurWithAnlageDto>();
    private SfGrid<MonteurWithAnlageDto> Grid = new();

    private IEnumerable<MonteurResponse> Monteure { get; set; } = new List<MonteurResponse>();
    private IEnumerable<AnlageDto> Anlagen { get; set; } = new List<AnlageDto>();

    private int SelectedMonteurId { get; set; }
    private int SelectedAnlageId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var dataTask = LoadData();
        var monteurTask = LoadMonteure();
        var anlageTask = LoadAnlagen();
        await Task.WhenAll(dataTask, monteurTask, anlageTask);
    }

    private void OnRowSelected(RowSelectEventArgs<MonteurWithAnlageDto> args)
    {
        if (args.Data != null)
        {
            SelectedMonteurId = args.Data.MonteurId;
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        try
        {
            Data = await MonteurService.GetMonteurWithAnlage();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Laden der Daten: {ex.Message}", false);
        }
    }

    private async Task LoadMonteure()
    {
        try
        {
            Monteure = await MonteurService.GetAllMonteure();
        }
        catch (Exception ex)
        {
             await ToastService.ShowToast($"Fehler beim Laden der Anlagen: {ex.Message}", false);
        }
    }

    private async Task LoadAnlagen()
    {
        try
        {
            Anlagen = await AnlagenService.GetAllAnlagen();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Laden der Anlagen: {ex.Message}", false);
        }
    }

    private async Task AssignMonteurToAnlage()
    {
        try
        {
            if (SelectedMonteurId > 0 && SelectedAnlageId > 0)
            {
                var alreadyAssigned = Data.Any(m => m.MonteurId == SelectedMonteurId && m.AnlageId == SelectedAnlageId);
                if (alreadyAssigned)
                {
                    await ToastService.ShowToast("Dieser Monteur ist bereits dieser Anlage zugeordnet.", false);
                    return;
                }
                await MonteurService.AssignMonteurToAnlage(SelectedMonteurId, SelectedAnlageId);

                await LoadData();

                var updatedMonteur = Data.FirstOrDefault(m => m.MonteurId == SelectedMonteurId);
                if (updatedMonteur != null)
                {
                    updatedMonteur.AnlageId = SelectedAnlageId;
                    var anlage = Anlagen.FirstOrDefault(a => a.AnlageId == SelectedAnlageId);
                    updatedMonteur.AnlageName = anlage?.AnlageName;
                }

                if (!Data.Any(m => m.MonteurId == SelectedMonteurId))
                {
                    SelectedMonteurId = 0;
                }
                if (!Anlagen.Any(a => a.AnlageId == SelectedAnlageId))
                {
                    SelectedAnlageId = 0;
                }

                StateHasChanged();
                await ToastService.ShowToast("Monteur erfolgreich der Anlage zugewiesen.", true);
            }
            else
            {
                await ToastService.ShowToast("Bitte wähle einen Monteur UND eine Anlage.", false);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Zuweisen des Monteurs zur Anlage: {ex.Message}", false);
        }
    }
}
