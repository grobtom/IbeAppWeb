@page "/umsatz"
@using IbeAppWeb.DTOs
@using IbeAppWeb.DTOs.Umsatz
@using System.ComponentModel.DataAnnotations
@using IbeAppWeb.Services
@using IbeAppWeb.Forms
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Spinner
@inject ProjectService ProjectService
@inject UmsatzService UmsatzService
@inject IbeToastService ToastService


<h3>Umsatz</h3>

<EditForm Model="@formModel" OnValidSubmit="LoadUmsatz">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container mt-4">
        <div class="row mb-3">
            <div class="col-md-4">
                <label for="projectDb" class="form-label">Projekt:</label>
                <SfComboBox TValue="int?" TItem="Project" PopupHeight="230px" 
                @bind-value="@formModel.SelectedProjectId" DataSource="@projects">
                    <ComboBoxFieldSettings Text="ProjectName" Value="ProjectId" />
                </SfComboBox>
            </div>
            <div class="col-md-4">
                <label for="saniertAmVon" class="form-label">Ausgeführt ab:</label>
                <SfDatePicker TValue="DateTime?" @bind-value="@formModel.SaniertAmVon"></SfDatePicker>
            </div>
            <div class="col-md-4">
                <label for="saniertAmBis" class="form-label">Ausgeführt bis:</label>
                <SfDatePicker TValue="DateTime?" @bind-value="@formModel.SaniertAmBis"></SfDatePicker>
            </div>
            <div class="col-md-4">
                <label for="saniertAm" class="form-label">Ausgeführt am:</label>
                <SfDatePicker TValue="DateTime?" @bind-value="@formModel.SaniertAm"></SfDatePicker>
            </div> 
            <div class="col-md-4">
                <label class="form-label">Wähle Sanierungsbereich:</label>
                <SfComboBox TValue="int" TItem="KanalSchacht" PopupHeight="230px" @bind-value="@ComboBoxValue" DataSource="@kanalSchachtList">
                    <ComboBoxEvents TValue="int" TItem="KanalSchacht" />
                    <ComboBoxFieldSettings Text="Auswahl" Value="Id" />
                </SfComboBox>
            </div>
        </div>
        <div class="row mb-3">            
            <div class="col-md-4 d-flex align-items-end">
                <button class="btn btn-primary me-2" type="submit" disabled="@isLoading">Umsatz laden</button>
                <button class="btn btn-secondary" type="button" @onclick="ResetForm">Reset</button>
            </div>
        </div>
    </div>
</EditForm>
<div>
    @if (isLoading)
    {
        <div id="container">
            <SfSpinner @bind-Visible="@isLoading" Label="Loading...." Type="@SpinnerType.Bootstrap">
            </SfSpinner>
        </div>
    }
    else
    {
        <SfGrid ID="Grid" @ref="grid" DataSource="@masterDaten" AllowPaging="true" AllowReordering="true" AllowGrouping="true" AllowPdfExport="true">
            <GridPageSettings PageCount="5" PageSizes="true" PageSize="10"></GridPageSettings>
            <GridColumns>
                <GridColumn Field=@nameof(UmsatzDto.SaniertAm) HeaderText="Saniert am" Width="80" Format="dd.MM.yyyy"></GridColumn>
                <GridColumn Field=@nameof(UmsatzDto.Fahrzeug) HeaderText="Fahrzeug" Width="40"></GridColumn>
                <GridColumn Field=@nameof(UmsatzDto.Kolonnenfuehrer) HeaderText="Kolonnenführer" Width="80"></GridColumn>
                <GridColumn Field=@nameof(UmsatzDto.Umsatz) HeaderText="Umsatz" Width="80" Format="C2"
                            TextAlign="TextAlign.Right"></GridColumn>
            </GridColumns>
            <GridAggregates>
                <GridAggregate>
                    <GridAggregateColumns>
                        <GridAggregateColumn Field=@nameof(UmsatzDto.Umsatz) Type="AggregateType.Sum" Format="C2">
                            <FooterTemplate>
                                @{
                                    var aggregate = (context as AggregateTemplateContext);
                                    <div>
                                        <p>Totalsumme: @aggregate?.Sum</p>
                                    </div>
                                }
                            </FooterTemplate>
                        </GridAggregateColumn>
                    </GridAggregateColumns>
                </GridAggregate>
            </GridAggregates>
        </SfGrid>
        
    }
</div>


@code {
    private SfGrid<UmsatzDto> grid = new();
    private List<UmsatzDto> masterDaten = new();
    private List<Project> projects = new();
    private UmsatzFormModel formModel = new();
    private UmsatzResultDto umsatzData = new();
    private List<UmsatzFahrzeugMonteurDto> umsatzFahrzeugMonteurDto = new();
    private UmsatzFahrzeugMonteurResultDto umsatzFahrzeugMonteurResultDto = new();

    private bool isLoading = false;
    private string projectDb = string.Empty;

    private List<KanalSchacht> kanalSchachtList = new List<KanalSchacht>
    {
        new KanalSchacht { Id = 1, Auswahl = "Kanal" },
        new KanalSchacht { Id = 2, Auswahl = "Schacht" }
    };
    private int ComboBoxValue = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
    }

    private async Task LoadProjects()
    {
        try
        {
            projects = await ProjectService.GetActiveProjectsAsync();
            await ToastService.ShowToast($"Daten erfolgreich geladen.", true);
        }
        catch
        {
            await ToastService.ShowToast($"Fehler beim Laden der Projektdaten!", false);
        }
    }


    private void ResetForm()
    {
        formModel = new();
        masterDaten = new();
    }

    public class UmsatzFormModel : IValidatableObject
    {
        public string LvPos { get; set; }
        public string Kurztext { get; set; }
        [Required(ErrorMessage = "Bitte wählen Sie ein Projekt aus.")]
        public int? SelectedProjectId { get; set; }
        [DataType(DataType.Date)]
        public DateTime? SaniertAm { get; set; }
        [DataType(DataType.Date)]
        public DateTime? SaniertAmVon { get; set; }
        [DataType(DataType.Date)]
        public DateTime? SaniertAmBis { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (SaniertAmVon.HasValue && SaniertAmBis.HasValue && SaniertAmVon > SaniertAmBis)
            {
                yield return new ValidationResult
                (
                    "Saniert Am Von darf nicht nach Saniert Am Bis liegen.",
                    new[] { nameof(SaniertAmVon), nameof(SaniertAmBis) });
            }
        }
    }


    private async Task LoadUmsatz()
    {
        isLoading = true;

        try
        {
            // Get the selected project and its database name
            var selectedProject = projects.FirstOrDefault(p => p.ProjectId == formModel.SelectedProjectId);
            projectDb = selectedProject?.ProjectName ?? "defaultDb";

            // Check which date fields are provided and call the appropriate service
            if (formModel.SaniertAm.HasValue)
            {
                // Fetch data for a specific date
                umsatzData = await UmsatzService.GetUmsatzByFahrzeugAndDateAsync(
                    saniertAm: formModel.SaniertAm.Value,
                    ComboBoxValue: ComboBoxValue,
                    projectDb: projectDb
                );

                // Assign the fetched data to the masterDaten list
                masterDaten = umsatzData?.UmsatzFahrzeugDatum ?? new List<UmsatzDto>();
            }
            else if (formModel.SaniertAmVon.HasValue && formModel.SaniertAmBis.HasValue)
            {
                // Fetch data for a date range
                umsatzFahrzeugMonteurResultDto = await UmsatzService.GetUmsatzByFahrzeugMonteurAsync(
                    SaniertAmVon: formModel.SaniertAmVon.Value,
                    SaniertAmBis: formModel.SaniertAmBis.Value,
                    ComboBoxValue: ComboBoxValue,
                    projectDb: projectDb
                );
                umsatzFahrzeugMonteurDto = umsatzFahrzeugMonteurResultDto?.umsatzFahrzeugMonteurDtos ?? new List<UmsatzFahrzeugMonteurDto>();
                // Assign the fetched data to the masterDaten list
                masterDaten = MapUmsatzData();
            }           

            else
            {
                // Handle the case where no valid date input is provided
                masterDaten = new List<UmsatzDto>();
                await ToastService.ShowToast($"Kein gültiges Datum eingegeben!", false);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Laden der Umsatzdaten: {ex.Message}", false);
        }
        finally
        {
            isLoading = false;
        }
    }

    public List<UmsatzDto> MapUmsatzData()
    {
        if (umsatzFahrzeugMonteurDto == null)
            return new List<UmsatzDto>();

        return umsatzFahrzeugMonteurDto.Select(item => new UmsatzDto
            {
                PkLvPos = item.PkLvPos,
                Kurztext = item.Kurztext,
                SaniertAm = item.Ausfuehrungsdatum,
                Fahrzeug = item.Fahrzeug,
                Kolonnenfuehrer = item.Kolonnenfuehrer,
                Umsatz = item.Gesamtumsatz
            }).ToList();
    }


}
