@page "/umsatz"
@using IbeAppWeb.DTOs
@using IbeAppWeb.DTOs.Umsatz
@using System.ComponentModel.DataAnnotations
@using IbeAppWeb.Services
@using IbeAppWeb.Forms
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@inject ProjectService ProjectService
@inject UmsatzService UmsatzService


<h3>Umsatz</h3>

<EditForm Model="@formModel" OnValidSubmit="LoadUmsatz">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container mt-4">
        <div class="row mb-3">
            <div class="col-md-4">
                <label for="projectDb" class="form-label">Project DB:</label>
                <InputSelect id="projectDb" class="form-control" @bind-value="formModel.SelectedProjectId">
                    <option value="">Select a project</option>
                    @foreach (var project in projects)
                    {
                        <option value="@project.ProjectId">@project.ProjectName</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-4">
                <label for="saniertAmVon" class="form-label">Saniert Am Von:</label>
                <SfDatePicker TValue="DateTime?" @bind-value="@formModel.SaniertAmVon"></SfDatePicker>
            </div>

            <div class="col-md-4">
                <label for="saniertAmBis" class="form-label">Saniert Am Bis:</label>
                <SfDatePicker TValue="DateTime?" @bind-value="@formModel.SaniertAmBis"></SfDatePicker>
            </div>
            <div class="col-md-4">
                <label for="saniertAm" class="form-label">Saniert Am:</label>
                <InputDate id="saniertAm" class="form-control" @bind-value="formModel.SaniertAm" />
            </div> 
            <div class="col-md-4">
                <label class="form-label">Wähle Bereich:</label>
                <SfComboBox TValue="int" TItem="KanalSchacht" PopupHeight="230px" @bind-value="@ComboBoxValue" DataSource="@kanalSchachtList">
                    <ComboBoxEvents TValue="int" TItem="KanalSchacht" />
                    <ComboBoxFieldSettings Text="Auswahl" Value="Id" />
                </SfComboBox>
            </div>
        </div>
        <div class="row mb-3">            
            <div class="col-md-4 d-flex align-items-end">
                <button class="btn btn-primary me-2" type="submit" disabled="@isLoading">Lade Umsatz</button>
                <button class="btn btn-secondary" type="button" @onclick="ResetForm">Reset</button>
            </div>
        </div>
    </div>
</EditForm>
<div>
    @if (isLoading)
    {
        <p><em>Loading...</em></p>
    }
    else if (errorOccurred)
    {
        <div class="alert alert-danger" role="alert">
            An error occurred. Please reload the page.
        </div>
    }
    else if (masterDaten == null || masterDaten.Count == 0)
    {
        <div class="alert alert-warning" role="alert">
            Keine Umsatzdaten gefunden.
        </div>
    }
    else
    {
        <SfGrid ID="Grid" @ref="grid" DataSource="@masterDaten" AllowPaging="true" AllowReordering="true" AllowGrouping="true" AllowPdfExport="true">
            <GridPageSettings PageCount="5" PageSizes="true" PageSize="10"></GridPageSettings>
            <GridColumns>
                <GridColumn Field=@nameof(UmsatzDto.SaniertAm) HeaderText="Saniert am" Width="80" Format="dd.MM.yyyy"></GridColumn>
                <GridColumn Field=@nameof(UmsatzDto.Fahrzeug) HeaderText="Fahrzeug" Width="40"></GridColumn>
                <GridColumn Field=@nameof(UmsatzDto.Kolonnenfuehrer) HeaderText="Kolonnenführer" Width="80"></GridColumn>
                <GridColumn Field=@nameof(UmsatzDto.Umsatz) HeaderText="Umsatz" Width="80"></GridColumn>
            </GridColumns>
            <GridAggregates>
                <GridAggregate>
                    <GridAggregateColumns>
                        <GridAggregateColumn Field=@nameof(UmsatzDto.Umsatz) Type="AggregateType.Sum" Format="C2">
                            <FooterTemplate>
                                @{
                                    var aggregate = (context as AggregateTemplateContext);
                                    <div>
                                        <p>Totalsumme: @aggregate.Sum</p>
                                    </div>
                                }
                            </FooterTemplate>
                        </GridAggregateColumn>
                    </GridAggregateColumns>
                </GridAggregate>
            </GridAggregates>
        </SfGrid>
    }
</div>


@code {
    private SfGrid<UmsatzDto> grid;
    private List<UmsatzDto> masterDaten;
    private List<Project> projects = new();
    private UmsatzFormModel formModel = new();
    private UmsatzResultDto umsatzData;
    private List<UmsatzFahrzeugMonteurDto> umsatzFahrzeugMonteurDto;
    private UmsatzFahrzeugMonteurResultDto umsatzFahrzeugMonteurResultDto;

    private bool isLoading = false;
    private bool errorOccurred = false;
    private string base64Image;
    private string projectDb;

    private List<KanalSchacht> kanalSchachtList = new List<KanalSchacht>
    {
        new KanalSchacht { Id = 1, Auswahl = "Kanal" },
        new KanalSchacht { Id = 2, Auswahl = "Schacht" }
    };
    private int ComboBoxValue = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
    }

    private async Task LoadProjects()
    {
        try
        {
            projects = await ProjectService.GetActiveProjectsAsync();
        }
        catch
        {
            errorOccurred = true;
        }
    }

    private void ResetForm()
    {
        formModel = new();
        masterDaten = null;
    }

    public class UmsatzFormModel
    {
        [Required]
        public int? SelectedProjectId { get; set; }

        [DataType(DataType.Date)]
        public DateTime? SaniertAm { get; set; }

        [DataType(DataType.Date)]
        public DateTime? SaniertAmVon { get; set; }

        [DataType(DataType.Date)]
        public DateTime? SaniertAmBis { get; set; }

    }

    private async Task LoadUmsatz()
    {
        isLoading = true;
        errorOccurred = false;

        try
        {
            // Get the selected project and its database name
            var selectedProject = projects.FirstOrDefault(p => p.ProjectId == formModel.SelectedProjectId);
            projectDb = selectedProject?.ProjectName ?? "defaultDb";

            // Check which date fields are provided and call the appropriate service
            if (formModel.SaniertAm.HasValue)
            {
                // Fetch data for a specific date
                umsatzData = await UmsatzService.GetUmsatzByFahrzeugAndDateAsync(
                    saniertAm: formModel.SaniertAm.Value,
                    ComboBoxValue: ComboBoxValue,
                    projectDb: projectDb
                );

                // Assign the fetched data to the masterDaten list
                masterDaten = umsatzData?.UmsatzFahrzeugDatum ?? new List<UmsatzDto>();
            }
            else if (formModel.SaniertAmVon.HasValue && formModel.SaniertAmBis.HasValue)
            {
                // Fetch data for a date range
                umsatzFahrzeugMonteurResultDto = await UmsatzService.GetUmsatzByFahrzeugMonteurAsync(
                    SaniertAmVon: formModel.SaniertAmVon.Value,
                    SaniertAmBis: formModel.SaniertAmBis.Value,
                    ComboBoxValue: ComboBoxValue,
                    projectDb: projectDb
                );
                umsatzFahrzeugMonteurDto = umsatzFahrzeugMonteurResultDto?.umsatzFahrzeugMonteurDtos ?? new List<UmsatzFahrzeugMonteurDto>();
                // Assign the fetched data to the masterDaten list
                masterDaten = MapUmsatzData();
            }           

            else
            {
                // Handle the case where no valid date input is provided
                masterDaten = new List<UmsatzDto>();
                errorOccurred = true;
                Console.WriteLine("No valid date input provided.");
            }
        }
        catch (Exception ex)
        {
            // Log the error and set the error flag
            errorOccurred = true;
            Console.WriteLine($"Error loading Umsatz data: {ex.Message}");
        }
        finally
        {
            // Reset the loading state
            isLoading = false;
        }
    }

    public List<UmsatzDto> MapUmsatzData()
    {
        if (umsatzFahrzeugMonteurDto == null)
            return new List<UmsatzDto>();

        return umsatzFahrzeugMonteurDto.Select(item => new UmsatzDto
            {
                PkLvPos = item.PkLvPos,
                SaniertAm = item.Ausfuehrungsdatum,
                Fahrzeug = item.Fahrzeug,
                Kolonnenfuehrer = item.Kolonnenfuehrer,
                Umsatz = item.Gesamtumsatz
            }).ToList();
    }

}
