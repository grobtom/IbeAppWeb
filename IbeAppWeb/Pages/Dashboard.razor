@page "/dashboard"  
@using IbeAppWeb.DTOs.Umsatz  
@using static System.Net.WebRequestMethods  
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids  
@using Syncfusion.Blazor.Charts  
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Spinner
@using IbeAppWeb.Services
@inject UmsatzService UmsatzService
@inject IbeToastService ToastService
@inject NavigationManager NavigationManager

<h2 class="text-2xl font-bold mb-4">Umsatz-Dashboard</h2>  
<p>@message</p>
@if (dashboardData is null)  
{  
    <p>Lade Daten...</p>
            <div id="container">
            <SfSpinner @bind-Visible="@isLoading" Label="Loading...." Type="@SpinnerType.Bootstrap">
            </SfSpinner>
        </div>
}  
else  
{ 
    <div class="mb-4 font-semibold">  
        Gesamtumsatz aller Projekte: <span style="color:green">€@dashboardData.GesamtumsatzAllProjects.ToString("N2")</span>  
    </div>  
    <SfChart Title="Umsatz je Projekt" >
        <ChartEvents OnPointClick="PointClickEvent"></ChartEvents>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Projekt">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryXAxis>
        <ChartMargin Bottom="12"></ChartMargin>
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartPrimaryYAxis Title="Umsatz (€) " LabelFormat="N2">
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>  
            <ChartSeries DataSource="@dashboardData.Projects"  
                         XName="ProjectName"  
                         YName="GesamtumsatzAlle"  
                         Name="Gesamtumsatz lt. LV"
                         GroupName="ProjectName"
                         Fill="url(#grad1)"
                         ColumnWidth="0.7" ColumnSpacing="0.1" 
                         Type="ChartSeriesType.Column" 
                         CornerRadius="@(new ChartCornerRadius { TopLeft = 4, TopRight = 4})" 
                         LegendShape="LegendShape.Rectangle">
                <ChartMarker>
                    <ChartDataLabel Visible="true" Format="N2"></ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@dashboardData.Projects"
                         XName="ProjectName"
                         YName="GesamtumsatzMitDatum"
                         Name="Gesamtumsatz ausgeführt"
                         GroupName="ProjectName"
                         Fill="url(#grad2)"
                         ColumnWidth="0.5" ColumnSpacing="0.1" 
                         Type="ChartSeriesType.Column" 
                         CornerRadius="@(new ChartCornerRadius { TopLeft = 4, TopRight = 4})" 
                         LegendShape="LegendShape.Rectangle">
                <ChartMarker>
                    <ChartDataLabel Visible="true" Format="N2"></ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartLegendSettings Visible="true" ShapeHeight="9" ShapeWidth="9"></ChartLegendSettings>
    </SfChart>  

        <div class="grid-container">
            <div class="grid-half">
            @if (!string.IsNullOrEmpty(projectName))
            {
                <h5>Monteur Umsatz für @projectName</h5>
            }
            else
            {
                <h5>Monteur Umsatz</h5>
            }
            <SfGrid @ref="monteurGrid" DataSource="@monteurData" AllowPaging="true" AllowSorting="true" ShowColumnChooser="true">
                    <GridPageSettings PageCount="5" PageSizes="true" PageSize="5"></GridPageSettings>
                    <GridColumns>  
                        <GridColumn Field="ProjectName" HeaderText="Projekt" Width="150" />  
                        <GridColumn Field="Monteur" HeaderText="Monteur" Width="200" />
                    <GridColumn Field="Gesamtumsatz" HeaderText="Umsatz (€) " Format="N2" Type="Syncfusion.Blazor.Grids.ColumnType.Decimal" TextAlign="TextAlign.Right" Width="150" />
                </GridColumns>  
                </SfGrid>  
            </div>
            <div class="grid-half">
                @if(!string.IsNullOrEmpty(projectName))
                {
                    <div style="display: flex; align-items: center; justify-content: space-between;">
                        <h5>Anlage Umsatz für @projectName</h5>                    
                        <Syncfusion.Blazor.Buttons.SfButton CssClass="e-primary" 
                        OnClick="GotoArbeitsbericht">
                            Arbeitsbericht
                        </Syncfusion.Blazor.Buttons.SfButton>
                    </div>
                }
                else
                {
                    <h5>Anlage Umsatz</h5>
                }
                <SfGrid @ref="anlageGrid" DataSource="@fahrzeugData" AllowPaging="true" AllowSorting="true">
                    <GridPageSettings PageCount="5" PageSizes="true" PageSize="5"></GridPageSettings>
                    <GridColumns>  
                        <GridColumn Field="ProjectName" HeaderText="Projekt" Width="150" />  
                        <GridColumn Field="Fahrzeug" HeaderText="Anlage" Width="200" />
                    <GridColumn Field="Gesamtumsatz" HeaderText="Umsatz (€) " Format="N2" Type="Syncfusion.Blazor.Grids.ColumnType.Decimal" TextAlign="TextAlign.Right" Width="150" />
                </GridColumns>  
                </SfGrid>    
            </div>
        </div>
}  
<style>
    .grid-container {
        display: flex;
        flex-wrap: wrap;
        gap: 2rem;
        margin-top: 1.0rem;
    }

    .grid-half {
        flex: 1 1 48%;
        min-width: 300px;
    }
</style>
<svg style="height: 0">
    <defs>
        <linearGradient id="grad1" x1="0%" y1="0%" x2="0%" y2="100%">
            <stop offset="20%" style="stop-color:orange;stop-opacity:1" />
            <stop offset="100%" style="stop-color:darkred;stop-opacity:1" />
        </linearGradient>
    </defs>
</svg>
<svg style="height: 0">
    <defs>
        <linearGradient id="grad2" x1="0%" y1="0%" x2="0%" y2="100%">
            <stop offset="20%" style="stop-color:limegreen;stop-opacity:1" />
            <stop offset="100%" style="stop-color:cornflowerblue;stop-opacity:1" />
        </linearGradient>
    </defs>
</svg>

@code {
    private SfGrid<MonteurUmsatzDto>? monteurGrid;
    private SfGrid<FahrzeugUmsatzDto>? anlageGrid;
    private AllProjectsUmsatzSplitDto? dashboardData;
    private List<ProjektUmsatzDto> projektDaten = new();
    private List<MonteurUmsatzDto> monteurData = new();
    private List<FahrzeugUmsatzDto> fahrzeugData = new();


    private List<string> projektNamen = new();
    private List<string> monteurNamen = new();
    private List<string> fahrzeugNamen = new();


    private bool SidebarToggle { get; set; } = false;
    private bool isLoading = false;
    private string? projectName = string.Empty;
    private string? message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        DateTime start = DateTime.Parse("1.3.2025");
        DateTime end = DateTime.Parse("31.12.2025");
        dashboardData = await UmsatzService.GetProjectsUmsatzSplit(start, end);

        if (dashboardData != null)
        {
            projektDaten = dashboardData.Projects;
            monteurData = projektDaten.SelectMany(p => p.MonteurUmsaetze).ToList();
            fahrzeugData = projektDaten.SelectMany(p => p.FahrzeugUmsaetze).ToList();
            isLoading = false;
        }
    }

    public void PointClickEvent(PointEventArgs args)
    {
        projectName = args.Point.X?.ToString();
        monteurData = projektDaten
            .Where(p => p.ProjectName == projectName)
            .SelectMany(p => p.MonteurUmsaetze)
            .ToList();
        fahrzeugData = projektDaten
            .Where(p => p.ProjectName == projectName)
            .SelectMany(p => p.FahrzeugUmsaetze)
            .ToList();
        StateHasChanged();
    }

    public void GotoArbeitsbericht()
    {
        if (!string.IsNullOrEmpty(projectName))
        {
            var Id = projektDaten.FirstOrDefault(p => p.ProjectName == projectName)?.ProjectId;
            var schacht = projektDaten.FirstOrDefault(p => p.ProjectName == projectName)?.IsSchacht;
            NavigationManager.NavigateTo($"arbeitsscheine/{Id}/{schacht}");
        }
       
    }
}
