@page "/arbeitsscheine"
@using IbeAppWeb.DTOs
@inject ArbeitsscheinService ArbeitsscheinService
@inject ProjectService ProjectService
@inject AnlagenService AnlagenService
@inject MonteurService MonteurService
@inject IbeToastService ToastService
@inject IJSRuntime JS
@using System.ComponentModel.DataAnnotations
@using IbeAppWeb.Services
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using IbeAppWeb.Forms


<h3>Arbeitsbericht</h3>

<EditForm Model="@formModel" OnValidSubmit="LoadArbeitsscheine">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container mt-4">
        <div class="row mb-3">
            <div class="col-md-4">
                <label for="projectDb" class="form-label">Projekt:</label>
                <SfComboBox TValue="int?" TItem="Project" PopupHeight="230px" Placeholder="Projekt"
                @bind-value="@formModel.SelectedProjectId" DataSource="@projects">
                    <ComboBoxEvents TValue="int?" TItem="Project" ValueChange="OnProjectChange" />
                    <ComboBoxFieldSettings Text="ProjectName" Value="ProjectId" />
                </SfComboBox>
            </div>
            <div class="col-md-4">
                <label class="form-label">Bereich:</label>
                <SfComboBox TValue="int" TItem="KanalSchacht" PopupHeight="230px" 
                    @bind-value="@ComboBoxValue" DataSource="@kanalSchachtList" Enabled="false">
                    <ComboBoxEvents TValue="int" TItem="KanalSchacht" />
                    <ComboBoxFieldSettings Text="Auswahl" Value="Id" />
                </SfComboBox>
            </div>
            <div class="col-md-4">
                <label for="abschlagsrechnung" class="form-label">Abschlagsrechnung:</label>
                <SfTextBox @bind-value="@formModel.Abschlagsrechnung"></SfTextBox>
                <ValidationMessage For="@(() => formModel.Abschlagsrechnung)" />
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-4">
                <label for="saniertAmVon" class="form-label">Ausgeführt ab:</label>
                <SfDatePicker TValue="DateTime?" @bind-value="@formModel.SaniertAmVon"></SfDatePicker>
            </div>

            <div class="col-md-4">
                <label for="saniertAmBis" class="form-label">Ausgeführt bis:</label>
                <SfDatePicker TValue="DateTime?" @bind-value="@formModel.SaniertAmBis"></SfDatePicker>
            </div>
            <div class="col-md-4">
                <label for="saniertAm" class="form-label">Ausgeführt am:</label>
                <SfDatePicker TValue="DateTime?" @bind-value="@formModel.SaniertAm" @onchange="@OnSaniertAmChanged"></SfDatePicker>
            </div>

        </div>
        <div class="row mb-3">
            <div class="col-md-4">
                <label for="kolonnenfuehrer" class="form-label">Kolonnenführer:</label>
                <SfComboBox TValue="int?" TItem="MonteurResponse" PopupHeight="230px" Placeholder="Kolonnenführer"
                            @bind-value="@formModel.SelectedKolonnenfuehrerId" DataSource="@monteurData">
                    <ComboBoxFieldSettings Text="FullName" Value="MonteurId" />
                </SfComboBox>
            </div>
            <div class="col-md-4">
                <label for="monteurname" class="form-label">Monteur:</label>
                <SfComboBox TValue="int?" TItem="MonteurResponse" PopupHeight="230px" Placeholder="Monteur"
                            @bind-value="@formModel.SelectedMonteurId" DataSource="@monteurData">
                    <ComboBoxFieldSettings Text="FullName" Value="MonteurId" />
                </SfComboBox>
            </div>

            <div class="col-md-4">
                <label for="fahrzeug" class="form-label">Fahrzeug:</label>
                <SfComboBox TValue="int?" TItem="AnlageDto" PopupHeight="230px" Placeholder="Anlage"
                            @bind-value="@formModel.SelectedAnlageId" DataSource="@anlageData">
                    <ComboBoxFieldSettings Text="AnlageName" Value="AnlageId" />
                </SfComboBox>
            </div>
            <div class="col-md-4 d-flex align-items-end">
                <br/>
                <SfButton class="btn btn-primary me-2" type="submit" disabled="@isLoading">Lade Arbeitsberichte</SfButton>
                <SfButton class="btn btn-secondary" type="button" @onclick="ResetForm">Reset</SfButton>
            </div>
        </div>
    </div>
</EditForm>
@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <SfGrid ID="Grid" @ref="grid" DataSource="@arbeitsscheine" AllowPaging="true" 
            AllowSelection="true" AllowReordering="true" AllowGrouping="true" AllowResizing="true"
        Toolbar="@ToolbarItems" AllowPdfExport="true" AllowFiltering="true" AllowSorting="true" Height="300">
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
        <GridPageSettings PageCount="5" PageSizes="true" PageSize="10"></GridPageSettings>
        <GridTemplates>
            <DetailTemplate Context="ascontext">
                @{
                    var arbeitsschein = (ascontext as ArbeitsscheinDto);
                    var monteurCount = arbeitsschein?.MonteurList != null ? arbeitsschein.MonteurList.Count : 0;
                    var fahrzeugCount = arbeitsschein?.FahrzeugList != null ? arbeitsschein.FahrzeugList.Count : 0;
                }
                <table class="detailtable" width="100%">
                    <colgroup>
                        <col style="width: 30%;" />
                        <col style="width: 30%;" />
                        <col style="width: 40%;" />
                    </colgroup>
                    <thead>
                        <tr>
                            <th colspan="3" style="font-weight: 500;text-align: center; background-color: #e08e4f;">
                                Details
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td style="text-align: center;">
                                <strong style="color: #0a76ff;">Monteure:</strong><br>
                                <span>@(arbeitsschein?.Monteur ?? "Keine Monteure")</span>
                            </td>
                            <td style="text-align: center;">
                                <strong style="color: #0a76ff;">Anlagen:</strong><br>
                                <span>@(arbeitsschein?.AnlageName ?? "Keine Anlage")</span>
                            </td>
                            <td style="text-align: center;">
                                <strong style="color: #0a76ff;">Kurztext:</strong><br>
                                <span>@(arbeitsschein?.Kurztext ?? "-")</span>
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align: center;">
                                <strong style="color: #0a76ff;">Anzahl Monteure:</strong><br>
                                <span>@monteurCount</span>
                            </td>
                            <td style="text-align: center;">
                                <strong style="color: #0a76ff;">Anzahl Anlagen:</strong><br>
                                <span>@fahrzeugCount</span>
                            </td>
                            <td style="text-align: center;">
                                <strong style="color: #0a76ff;">Preis:</strong><br>
                                <span>@((arbeitsschein?.Preis ?? 0).ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("de-DE")) + " €")</span>
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align: center;">
                                <strong style="color: #0a76ff;">Anteil pro Monteur:</strong><br>
                                <span>
                                    @((arbeitsschein?.Positionssumme ?? 0) / (monteurCount == 0 ? 1 : monteurCount))
                                    @(" €")
                                </span>
                            </td>
                            <td style="text-align: center;">
                                <strong style="color: #0a76ff;">Anteil pro Anlage:</strong><br>
                                <span>
                                    @((arbeitsschein?.Positionssumme ?? 0) / (fahrzeugCount == 0 ? 1 : fahrzeugCount))
                                    @(" €")
                                </span>
                            </td>
                            <td style="text-align: center;">
                                <strong style="color: #0a76ff;">Positionssumme:</strong><br>
                                <span>@((arbeitsschein?.Positionssumme ?? 0).ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("de-DE")) + " €")</span>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </DetailTemplate>
        </GridTemplates>
        <GridEvents OnToolbarClick="ToolbarClickHandler" PdfDetailTemplateExporting="PDFDetailTemplateHandler" 
            TValue="ArbeitsscheinDto" QueryCellInfo="CustomizeCell"/>
        <GridColumns>
            <GridColumn Field=@nameof(ArbeitsscheinDto.HALTUNG) HeaderText="Haltung" Width="40"></GridColumn>
            <GridColumn Field=@nameof(ArbeitsscheinDto.LVPosition) HeaderText="LV-Position" Width="40"></GridColumn>
            <GridColumn Field=@nameof(ArbeitsscheinDto.Menge) HeaderText="Menge" Width="80"></GridColumn>
            <GridColumn Field=@nameof(ArbeitsscheinDto.SaniertAm) HeaderText="Ausgeführt am" Width="80" Format="dd.MM.yyyy"></GridColumn>
            <GridColumn Field=@nameof(ArbeitsscheinDto.Abschlagsrechnung) HeaderText="AR" Width="30"></GridColumn>
            <GridColumn Field=@nameof(ArbeitsscheinDto.Kolonnenfuehrer) HeaderText="Kolonnenführer" Width="80"></GridColumn>
            <GridColumn Field=@nameof(ArbeitsscheinDto.AnlageName) HeaderText="Fahrzeug" Width="80"></GridColumn>
        </GridColumns>
    </SfGrid>
    <div class="row mt-3">
        <div class="col-md-6">
            <h5>Gesamtsumme ausgeführt: @(gesamtSumme.ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("de-DE")) + " €")</h5>
        </div>
        <div class="col-md-6 text-end">
        <h5>Gesamtsumme LV: @(LvSumme.ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("de-DE")) + " €")</h5>
        </div>
    </div>
}

<style type="text/css" class="cssStyles">
    .detailtable td {
        font-size: 13px;
        padding: 4px;
        max-width: 0;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        font-weight: normal;
    }
    .e-grid .e-headercell
    {
        background-color: #a2d6f4;
        color: rgb(3, 2, 2);    
    }

    .cssaniertam {
        background-color: rgb(211, 225, 248) !important;
    }

    .csanlagename {
        background-color: rgb(252, 180, 131) !important;
    }

    .cskolonnenfuehrer {
        background-color: rgb(255, 237, 148) !important;
    }

    </style>

@code {
    private SfGrid<ArbeitsscheinDto> grid = new();

    private ArbeitsscheinFormModel formModel = new();

    private List<ArbeitsscheinDto> arbeitsscheine = new();

    private ArbeitsscheinResultDto arbeitsscheinResultDto = new();

    private List<Project>? projects = new();

    private IEnumerable<MonteurResponse> monteurData { get; set; } = new List<MonteurResponse>();

    private IEnumerable<AnlageDto> anlageData { get; set; } = new List<AnlageDto>();


    private List<string> ToolbarItems = new List<string>() { "PdfExport" };
    private bool isLoading = false;
    private string? base64Image;
    private string? projectDb;
    private Decimal gesamtSumme;
    private Decimal LvSumme;
    private bool IsSaniertAmUsed => formModel.SaniertAm.HasValue;
    private string Message = string.Empty;

    private List<KanalSchacht> kanalSchachtList = new List<KanalSchacht>
    {
        new KanalSchacht { Id = 1, Auswahl = "Kanal" },
        new KanalSchacht { Id = 2, Auswahl = "Schacht" }
    };

    private int ComboBoxValue = 1;

    private void OnProjectChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, Project> args)
    {
        if (args.ItemData.IsSchacht)
        { ComboBoxValue = 2; }
        else
        { ComboBoxValue = 1; }
    }

    protected override async Task OnInitializedAsync()
    {
        var projectsTask = LoadProjects();
        var monteureTask = LoadMonteure();
        var anlagenTask = LoadAnlagen();
        var imageTask = LoadImage();

        await Task.WhenAll(projectsTask, monteureTask, anlagenTask, imageTask);
    }

    private async Task LoadImage()
    {
        // JS-Modul laden
        var module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/imageHelper.js");

        // Funktion aufrufen
        base64Image = await module.InvokeAsync<string>("getImageAsBase64", "images/logos/logo_oxid.png");
    }

    private async Task LoadProjects()
    {
        try
        {
            // Only fetch active projects if not already loaded
            if (projects == null || projects.Count == 0)
                projects = await ProjectService.GetActiveProjectsAsync();
        }
        catch
        {
            await ToastService.ShowToast($"Fehler beim Laden der Projektdaten", false);
        }
    }

    private async Task LoadMonteure()
    {
        try
        {
            if (monteurData == null || !monteurData.Any())
                monteurData = await MonteurService.GetAllMonteure();
        }
        catch
        {
            await ToastService.ShowToast($"Fehler beim Laden der Monteurdaten", false);
        }
    }

    private async Task LoadAnlagen()
    {
        try
        {
            if (anlageData == null || !anlageData.Any())
                anlageData = await AnlagenService.GetAllAnlagen();
        }
        catch
        {
            await ToastService.ShowToast($"Fehler beim Laden der Anlagendaten", false);
        }
    }

    void CustomizeCell(QueryCellInfoEventArgs<ArbeitsscheinDto> args)
    {
        Console.WriteLine($"CustomizeCell called for field: {args.Column.Field}");
        if (args.Column.Field == nameof(ArbeitsscheinDto.SaniertAm) &&
                args.Data.SaniertAm == new DateTime(1, 1, 1))
        {
            args.Cell.AddClass(new[] { "cssaniertam" });
        }

        if (args.Column.Field == nameof(ArbeitsscheinDto.AnlageName) &&
            string.IsNullOrEmpty(args.Data.AnlageName))
        {
            args.Cell.AddClass(new[] { "csanlagename" });
        }

        if (args.Column.Field == nameof(ArbeitsscheinDto.Kolonnenfuehrer) &&
            string.IsNullOrEmpty(args.Data.Kolonnenfuehrer))
        {
            args.Cell.AddClass(new[] { "cskolonnenfuehrer" });
        }
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (string.IsNullOrWhiteSpace(base64Image))
        {
            await LoadImage();
        }
        if (!string.IsNullOrWhiteSpace(base64Image))
        {
            string pureBase64 = base64Image.Split(',')[1];

            if (args.Item.Id == "Grid_pdfexport" && grid != null)
            {
                PdfExportProperties ExportProperties = new PdfExportProperties();
                ExportProperties.PdfDetailRowMode = PdfDetailRowMode.Expand;
                ExportProperties.FileName = "Arbeitsbericht.pdf";
                Syncfusion.PdfExport.PdfFont font = new Syncfusion.PdfExport.PdfStandardFont(Syncfusion.PdfExport.PdfFontFamily.Helvetica, 10);
                List<PdfHeaderFooterContent> HeaderContent = new List<PdfHeaderFooterContent>
                {
                    new PdfHeaderFooterContent()
                    {
                        Type = ContentType.Image, Src=pureBase64,
                         Position = new PdfPosition() {X=0, Y = 0 }
                    },
                    new PdfHeaderFooterContent()
                    {
                        Type = ContentType.Text,
                        Value = "Arbeitsbericht",
                        Position = new PdfPosition() {X=300, Y = 0 },
                        Style = new PdfContentStyle() { FontSize = 18, TextBrushColor="#C67878" }
                    },
                    new PdfHeaderFooterContent()
                    {
                        Type = ContentType.Text,
                        Value = "Projekt: " + projectDb,
                        Position = new PdfPosition() {X=300, Y = 30 },
                        Style = new PdfContentStyle() { FontSize = 14, TextBrushColor="#0a76ff" }
                    },
                    new PdfHeaderFooterContent()
                    {
                        Type = ContentType.Text,
                        Value = "Gesamtsumme: " + gesamtSumme.ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("de-DE")) + " €",
                        Position = new PdfPosition() { X = 500, Y = 35 },
                        Style = new PdfContentStyle()
                        {
                            FontSize = 10,
                            TextBrushColor = "#000000",
                        }                    
                    }
                };
                PdfHeader Header = new PdfHeader() { FromTop = 0, Height = 80, Contents = HeaderContent };
                ExportProperties.Header = Header;

                await grid.ExportToPdfAsync(ExportProperties);
            }
        }
    }

    public void PDFDetailTemplateHandler(PdfDetailTemplateEventArgs<ArbeitsscheinDto> args)
    {
        var pdfRows = new List<PdfDetailTemplateRow>();
        var data = args.ParentRow.Data;

        // Defensive null checks and safe division
        int monteurCount = data?.MonteurList != null ? data.MonteurList.Count : 0;
        int fahrzeugCount = data?.FahrzeugList != null ? data.FahrzeugList.Count : 0;
        decimal positionssumme = data?.Positionssumme ?? 0;
        decimal preis = data?.Preis ?? 0;

        args.RowInfo.ColumnCount = 2;
        args.RowInfo.Headers = new List<PdfDetailTemplateRow>
        {
            new PdfDetailTemplateRow
            {
                Cells = new List<PdfDetailTemplateCell>
                {
                    new PdfDetailTemplateCell
                    {
                        Index = 0,
                        CellValue = "Details",
                        ColumnSpan = 2, 
                        Style = new PdfThemeStyle
                        {
                            Bold = true,
                            FontColor = "#0A76FF",
                            FontSize = 12
                        }
                    }
                }
            }
        };

        pdfRows.Add(ProcessPdfRow("Monteure", data?.Monteur ?? "N/A", "Kurztext", data?.Kurztext ?? "N/A"));
        pdfRows.Add(ProcessPdfRow("Preis", $"{preis.ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("de-DE"))} €", "Positionspreis", $"{positionssumme.ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("de-DE"))} €"));
        pdfRows.Add(ProcessPdfRow(
            "Anzahl Monteure", $"{monteurCount}",
            "Anteil pro Monteur", $"{(monteurCount == 0 ? positionssumme : positionssumme / monteurCount).ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("de-DE"))} €"
        ));
        pdfRows.Add(ProcessPdfRow(
            "Anzahl Fahrzeuge", $"{fahrzeugCount}",
            "Anteil pro Fahrzeug", $"{(fahrzeugCount == 0 ? positionssumme : positionssumme / fahrzeugCount).ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("de-DE"))} €"
        ));

        args.RowInfo.Rows = pdfRows;
    }

    PdfDetailTemplateRow ProcessPdfRow(string label1, string value1, string label2, string value2)
    {
        var cells = new List<PdfDetailTemplateCell>();
        cells.Add(new PdfDetailTemplateCell() { CellValue = $"{label1}: {value1}" });
        cells.Add(new PdfDetailTemplateCell() { CellValue = $"{label2}: {value2}" });
        return new PdfDetailTemplateRow() { Cells = cells };
    }

    private void OnSaniertAmChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            formModel.SaniertAm = date;
            formModel.SaniertAmVon = null;
            formModel.SaniertAmBis = null;
        }
        else
        {
            formModel.SaniertAm = null;
        }
    }

    private async Task LoadArbeitsscheine()
    {
        isLoading = true;

        try
        {
            var selectedProject = projects?.FirstOrDefault(p => p.ProjectId == formModel.SelectedProjectId);
            projectDb = selectedProject?.ProjectName ?? "defaultDb";

            arbeitsscheinResultDto = await ArbeitsscheinService.GetArbeitsscheineAsync(
                firma: formModel.Firma,
                saniertAmVon: formModel.SaniertAmVon,
                saniertAmBis: formModel.SaniertAmBis,
                saniertAm: formModel.SaniertAm,
                abschlagsrechnung: formModel.Abschlagsrechnung,
                kolonnenfuehrer: monteurData.FirstOrDefault(m => m.MonteurId == formModel.SelectedKolonnenfuehrerId)?.Nachname,
                fahrzeug: anlageData.FirstOrDefault(anlageData => anlageData.AnlageId == formModel.SelectedAnlageId)?.AnlageName,
                monteurname: monteurData.FirstOrDefault(m => m.MonteurId == formModel.SelectedMonteurId)?.Nachname,
                projectDb: projectDb,
                ComboBoxValue: ComboBoxValue
            );
            arbeitsscheine = arbeitsscheinResultDto.Arbeitsscheine ?? new();
            gesamtSumme = GetSum();
            LvSumme = GetLvSum();

            await grid.RefreshColumns();
            await grid.Refresh();
        }
        catch
        {
            await ToastService.ShowToast($"Fehler beim Laden der Arbeistberichtdaten", false);
        }
        finally
        {
            isLoading = false;
        }
    }
    private Decimal GetSum()
    {
        gesamtSumme = 0;
        foreach (var item in arbeitsscheine.Where(a => a.SaniertAm > new DateTime(1,1,1)))
        {
            gesamtSumme += item.Positionssumme;
        }
        return gesamtSumme;
    }

    private Decimal GetLvSum(){
        LvSumme = 0;
        foreach (var item in arbeitsscheine)
        {
            LvSumme += item.Positionssumme;
        }
        return LvSumme;
    }

    private void ResetForm()
    {
        formModel = new();
        arbeitsscheine = new();
    }

    public class ArbeitsscheinFormModel
    {
        [Required]
        public int? SelectedProjectId { get; set; }

        public string? Firma { get; set; }

        [DataType(DataType.Date)]
        public DateTime? SaniertAmVon { get; set; }

        [DataType(DataType.Date)]
        public DateTime? SaniertAmBis { get; set; }

        [DataType(DataType.Date)]
        public DateTime? SaniertAm { get; set; }
        [MaxLength(4, ErrorMessage = "Name für die Abschlagsrechnung darf nicht länger als 4 Zeichen sein!")]
        public string? Abschlagsrechnung { get; set; }
        [MaxLength(30, ErrorMessage = "Name für den Kolonnenführer darf nicht länger als 30 Zeichen sein!")]
        public string? Kolonnenfuehrer { get; set; }
        [MaxLength(10, ErrorMessage = "Name für das Fahrzeug darf nicht länger als 10 Zeichen sein!")]
        public string? Fahrzeug { get; set; }
        [MaxLength(30,ErrorMessage = "Name für den Monteur darf nicht länger als 30 Zeichen sein!")]
        public string? Monteur { get; set; }
        public int? SelectedKolonnenfuehrerId { get; set; }
        public int? SelectedMonteurId { get; set; }
        public int? SelectedAnlageId { get; set; }
    }

    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        if (formModel.SaniertAmVon.HasValue && formModel.SaniertAmBis.HasValue && formModel.SaniertAmVon > formModel.SaniertAmBis)
        {
            yield return new ValidationResult
            (
                "Saniert Am Von darf nicht nach Saniert Am Bis liegen.",
                new[] { nameof(formModel.SaniertAmVon), nameof(formModel.SaniertAmBis) });
            }
        }
    }
}

