@page "/umsatzall"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.DropDowns
@using IbeAppWeb.DTOs.Umsatz
@using IbeAppWeb.Services
@using IbeAppWeb.Forms
@inject UmsatzService UmsatzService
@using System.ComponentModel.DataAnnotations


<h3>Umsatz Management</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}

l
<EditForm Model="@formModel" OnValidSubmit="FetchUmsatzData">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label">Ausgeführt ab:</label>
                    <SfDatePicker TValue="DateTime?" Placeholder="Start Date" @bind-value="@formModel.StartDate"></SfDatePicker>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Ausgeführt bis:</label>
                    <SfDatePicker TValue="DateTime?" Placeholder="End Date" @bind-value="@formModel.EndDate"></SfDatePicker>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Wähle Sanierungsbereich:</label>
                    <SfComboBox TValue="int" TItem="KanalSchacht" PopupHeight="230px" @bind-value="ComboBoxValue" DataSource="@kanalSchachtList">
                        <ComboBoxEvents TValue="int" TItem="KanalSchacht" />
                        <ComboBoxFieldSettings Text="Auswahl" Value="Id" />
                    </SfComboBox>
                </div>
                <div class="col-md-4">
                    <br/>
                    <SfButton class="btn btn-primary me-2" type="submit" disabled="@isLoading">Lade Umsatzdaten</SfButton>
                </div>
            </div>
        </div>
    </div>
</EditForm>

<div id="container">
    <SfSpinner @bind-Visible="@isLoading">
    </SfSpinner>
</div>

<SfGrid @ref="grid" DataSource="@Projects" AllowPaging="true" AllowSorting="true" Height="400px">
    <GridPageSettings PageCount="5" PageSizes="true" PageSize="10"></GridPageSettings>
    <GridTemplates>
        <DetailTemplate Context="detailcontext">
            @{
                var project = (detailcontext as UmsatzFahrzeugMonteurProjectDto);
            }
            <SfGrid DataSource="@project?.UmsatzProject" AllowPaging="true" AllowSorting="true" Height="300px">
                <GridPageSettings PageCount="5"></GridPageSettings>
                <GridColumns>
                    <GridColumn Field="@nameof(UmsatzFahrzeugMonteurDto.ProjectName)" HeaderText="Project Name" Width="150"></GridColumn>
                    <GridColumn Field="@nameof(UmsatzFahrzeugMonteurDto.Ausfuehrungsdatum)" HeaderText="Ausführungsdatum" Format="d" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                    <GridColumn Field="@nameof(UmsatzFahrzeugMonteurDto.Fahrzeug)" HeaderText="Anlage" Width="150"></GridColumn>
                    <GridColumn Field="@nameof(UmsatzFahrzeugMonteurDto.Kolonnenfuehrer)" HeaderText="Kolonnenführer" Width="150"></GridColumn>
                    <GridColumn Field="@nameof(UmsatzFahrzeugMonteurDto.Gesamtumsatz)" HeaderText="Summe" Format="C2" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                </GridColumns>
                <GridAggregates>
                    <GridAggregate>
                        <GridAggregateColumns>
                            <GridAggregateColumn Field=@nameof(UmsatzFahrzeugMonteurDto.Gesamtumsatz) Type="AggregateType.Sum" Format="C2">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>
                                            <p>Totalsumme: @aggregate.Sum</p>
                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                        </GridAggregateColumns>
                    </GridAggregate>                        
                </GridAggregates>
            </SfGrid>
        </DetailTemplate>
    </GridTemplates>
    <GridColumns>
        <GridColumn Field="Project.ProjectId" HeaderText="Projekt ID" TextAlign="TextAlign.Center" Width="110"></GridColumn>
        <GridColumn Field="Project.ProjectName" HeaderText="Projekt Name" Width="200"></GridColumn>
        <GridColumn Field="Project.CreatedOnUtc" HeaderText="Erzeugt am" Format="d" TextAlign="TextAlign.Center" Width="150"></GridColumn>
        <GridColumn Field="Project.DbActive" HeaderText="Aktive" TextAlign="TextAlign.Center" Width="100"></GridColumn>
    </GridColumns>
</SfGrid>

@code {
    private SfGrid<UmsatzFahrzeugMonteurProjectDto> grid;
    private List<UmsatzFahrzeugMonteurProjectDto> Projects { get; set; } = new List<UmsatzFahrzeugMonteurProjectDto>();
    private string? errorMessage;
    private string? successMessage;
    private bool isLoading = false;
    private UmsatzFormModel formModel = new();
    private List<KanalSchacht> kanalSchachtList = new List<KanalSchacht>
    {
        new KanalSchacht { Id = 1, Auswahl = "Kanal" },
        new KanalSchacht { Id = 2, Auswahl = "Schacht" }
    };
    private int ComboBoxValue = 1;

    private async Task ShowMessage(string message, bool isSuccess)
    {
        if (isSuccess)
        {
            successMessage = message;
            errorMessage = null;
        }
        else
        {
            errorMessage = message;
            successMessage = null;
        }

        StateHasChanged();

        await Task.Delay(3000);

        if (isSuccess)
        {
            successMessage = null;
        }
        else
        {
            errorMessage = null;
        }

        StateHasChanged();
    }
    private async Task FetchUmsatzData()
    {
        try
        {
            if (!formModel.StartDate.HasValue || !formModel.EndDate.HasValue)
            {
                await ShowMessage($"Please select both a start and an end date.",false);
                successMessage = null;
                return;
            }

            isLoading = true; 
            StateHasChanged();

            UmsatzFahrzeugMonteurProjectResultDto result = await UmsatzService.GetUmsatzByFahrzeugAndMonteurAllAsync(formModel.StartDate, formModel.EndDate, ComboBoxValue);
            if (result?.Projects != null && result.Projects.Any())
            {
                Projects = result.Projects;
                await ShowMessage($"Data erfolgreich geladen.", true);
                errorMessage = null;
            }
            else
            {
                Projects = new List<UmsatzFahrzeugMonteurProjectDto>();
                successMessage = null;
                await ShowMessage($"Keine Daten gefunden.", false);
            }
        }
        catch (Exception ex)
        {
            await ShowMessage($"Error fetching data: {ex.Message}", false);
            successMessage = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class UmsatzFormModel : IValidatableObject
    {

        [DataType(DataType.Date)]
        public DateTime? StartDate { get; set; }
        [DataType(DataType.Date)]
        public DateTime? EndDate { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (StartDate.HasValue && EndDate.HasValue && StartDate > EndDate)
            {
                yield return new ValidationResult
                (
                    "Saniert Am Von darf nicht nach Saniert Am Bis liegen.",
                    new[] { nameof(StartDate), nameof(EndDate) });
            }
        }
    }
}

