@page "/umsatzall"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Spinner
@using IbeAppWeb.DTOs.Umsatz
@using IbeAppWeb.Services
@inject UmsatzService UmsatzService

<h3>Umsatz Management</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row mb-3">
            <div class="col-md-4">
                <SfDatePicker TValue="DateTime?" Placeholder="Start Date" @bind-Value="StartDate"></SfDatePicker>
            </div>
            <div class="col-md-4">
                <SfDatePicker TValue="DateTime?" Placeholder="End Date" @bind-Value="EndDate"></SfDatePicker>
            </div>
            <div class="col-md-4">
                <SfButton CssClass="e-primary" OnClick="FetchUmsatzData">Umsatz laden</SfButton>
            </div>
        </div>

        <div id="container">
            <SfSpinner @bind-Visible="@isLoading">
            </SfSpinner>
        </div>

        <SfGrid @ref="grid" DataSource="@Projects" AllowPaging="true" AllowSorting="true" Height="400px">
            <GridPageSettings PageCount="5" PageSizes="true" PageSize="10"></GridPageSettings>
            <GridTemplates>
                <DetailTemplate Context="detailcontext">
                    @{
                        var project = (detailcontext as UmsatzFahrzeugMonteurProjectDto);
                    }
                    <SfGrid DataSource="@project?.UmsatzProject" AllowPaging="true" AllowSorting="true" Height="300px">
                        <GridPageSettings PageCount="5"></GridPageSettings>
                        <GridColumns>
                            <GridColumn Field="@nameof(UmsatzFahrzeugMonteurDto.ProjectName)" HeaderText="Project Name" Width="150"></GridColumn>
                            <GridColumn Field="@nameof(UmsatzFahrzeugMonteurDto.Ausfuehrungsdatum)" HeaderText="Ausführungsdatum" Format="d" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                            <GridColumn Field="@nameof(UmsatzFahrzeugMonteurDto.Typ)" HeaderText="Type" Width="100"></GridColumn>
                            <GridColumn Field="@nameof(UmsatzFahrzeugMonteurDto.Ressource)" HeaderText="Ressource" Width="150"></GridColumn>
                            <GridColumn Field="@nameof(UmsatzFahrzeugMonteurDto.Kolonnenfuehrer)" HeaderText="Kolonnenführer" Width="150"></GridColumn>
                            <GridColumn Field="@nameof(UmsatzFahrzeugMonteurDto.Gesamtumsatz)" HeaderText="Summe" Format="C2" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                        </GridColumns>
                        <GridAggregates>
                            <GridAggregate>
                                <GridAggregateColumns>
                                    <GridAggregateColumn Field=@nameof(UmsatzFahrzeugMonteurDto.Gesamtumsatz) Type="AggregateType.Sum" Format="C2">
                                        <FooterTemplate>
                                            @{
                                                var aggregate = (context as AggregateTemplateContext);
                                                <div>
                                                <p>Totalsumme: @aggregate.Sum</p>
                                                </div>
                                            }
                                        </FooterTemplate>
                                    </GridAggregateColumn>
                                </GridAggregateColumns>
                            </GridAggregate>                        
                        </GridAggregates>
                    </SfGrid>
                </DetailTemplate>
            </GridTemplates>
            <GridColumns>
                <GridColumn Field="Project.ProjectId" HeaderText="Projekt ID" TextAlign="TextAlign.Center" Width="110"></GridColumn>
                <GridColumn Field="Project.ProjectName" HeaderText="Projekt Name" Width="200"></GridColumn>
                <GridColumn Field="Project.CreatedOnUtc" HeaderText="Erzeugt am" Format="d" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                <GridColumn Field="Project.DbActive" HeaderText="Aktive" TextAlign="TextAlign.Center" Width="100"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>

@code {
    private SfGrid<UmsatzFahrzeugMonteurProjectDto> grid;
    private DateTime? StartDate { get; set; }
    private DateTime? EndDate { get; set; }
    private List<UmsatzFahrzeugMonteurProjectDto> Projects { get; set; } = new List<UmsatzFahrzeugMonteurProjectDto>();
    private string? errorMessage;
    private string? successMessage;
    private bool isLoading = false;

    private async Task FetchUmsatzData()
    {
        try
        {
            if (!StartDate.HasValue || !EndDate.HasValue)
            {
                errorMessage = "Please select both a start and an end date.";
                successMessage = null;
                return;
            }

            isLoading = true; 
            Console.WriteLine("Spinner ON");
            StateHasChanged();

            UmsatzFahrzeugMonteurProjectResultDto result = await UmsatzService.GetUmsatzByFahrzeugAndMonteurAllAsync(StartDate, EndDate);
            if (result?.Projects != null && result.Projects.Any())
            {
                Projects = result.Projects;
                successMessage = "Data successfully loaded.";
                errorMessage = null;
            }
            else
            {
                Projects = new List<UmsatzFahrzeugMonteurProjectDto>();
                successMessage = null;
                errorMessage = "No data found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching data: {ex.Message}";
            successMessage = null;
        }
        finally
        {
            isLoading = false;
            Console.WriteLine("Spinner OFF");
            StateHasChanged();
        }
    }
}
