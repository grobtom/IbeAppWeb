@page "/projects"
@using IbeAppWeb.DTOs
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using IbeAppWeb.Services
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject ProjectService ProjectService
@inject IbeToastService ToastService
@inject BauleiterService BauleiterService
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Projekte Management</h3>

<SfSpinner @bind-Visible="@isLoading" Label="Loading...." Type="@SpinnerType.Bootstrap"></SfSpinner>

<div class="col-lg-12">
    <EditForm Model="@SelectedData" OnValidSubmit="@UpdateProject">
        <div style="padding-top: 20px; display: flex; flex-direction: row; gap: 24px; align-items: center;">
            <div class="form-group" style="display: flex; flex-direction: column;">
                <label style="padding-bottom: 4px;">Projekt:</label>
                <SfTextBox ID="ProjectName" @bind-Value="@SelectedData.ProjectName" Placeholder="Projekt"></SfTextBox>
            </div>
            <div class="form-group" style="display: flex; flex-direction: column;">
                <label style="padding-bottom: 4px;">Bauleiter:</label>
                    <SfComboBox TValue="int?" TItem="BauleiterDto" PopupHeight="230px" Placeholder="Bauleiter:" @bind-Value="@SelectedData.BauleiterId" DataSource="@bauleiter">
                        <ComboBoxEvents TValue="int?" TItem="BauleiterDto" />
                        <ComboBoxFieldSettings Text="FullName" Value="BauleiterId" />
                    </SfComboBox>            
            </div>
            <div class="form-group" style="display: flex; flex-direction: column;">
                <label style="padding-bottom: 4px;">Aktiv</label>
                <SfSwitch @bind-Checked="@SelectedData.DbActive"></SfSwitch>
            </div>
            <div class="form-group" style="display: flex; flex-direction: column;">
                <label style="padding-bottom: 4px;">Schacht</label>
                <SfSwitch @bind-Checked="@SelectedData.IsSchacht"></SfSwitch>
            </div>
        </div>
        <div class="temp" style="margin-top: 16px;">
            <SfButton ButtonType="ButtonType.Submit">Projekt updaten</SfButton>
        </div>
    </EditForm>
</div>
<br />
@if (projects != null)
{
    <div>
        <SfGrid @ref="grid" DataSource="@projects" AllowSorting="true" AllowPaging="true" AllowSelection="true">
            <GridPageSettings PageCount="5" PageSizes="true" PageSize="10"></GridPageSettings>
            <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
            <GridEvents RowSelected="RowSelectHandler" RowDeselected="RowDeSelectHandler" TValue="Project"></GridEvents>
            <GridColumns>
                <GridColumn Field=@nameof(Project.ProjectId) HeaderText="Projekt ID" Width="120" IsPrimaryKey="true"></GridColumn>
                <GridColumn Field=@nameof(Project.ProjectName) HeaderText="Projekt Name" Width="150"></GridColumn>                
                <GridColumn Field=@nameof(Project.BauleiterFullName) HeaderText="Bauleiter" Width="150"></GridColumn>
                <GridColumn Field=@nameof(Project.CreatedOnUtc) HeaderText="Erstellt am:" Width="200"></GridColumn>
                <GridColumn Field=@nameof(Project.DbActive) HeaderText="Aktiv" Format="d" Width="150">
                    <Template>
                        @{
                            var changeData = (context as Project); 
                            if (changeData?.DbActive == true)
                            {
                                <div class="image">
                                <img src="@($"images/activproject.png")" alt="@changeData?.DbActive" width="24"/>
                                </div>
                            }
                            else
                            {
                                <div class="image"> 
                                <img src="@($"images/stop-icon.png")" alt="@changeData?.DbActive" width="24"/>
                                </div>
                            }
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(Project.IsSchacht) HeaderText="Kanal/Schacht" Format="d" Width="150">
                    <Template>
                        @{
                            var changeData = (context as Project); 
                            if (changeData?.IsSchacht == true)
                            {
                                <div class="image">
                                <img src="@($"images/schacht.png")" alt="@changeData?.IsSchacht" width="24"/>
                                </div>
                            }
                            else
                            {
                                <div class="image"> 
                                <img src="@($"images/rohr.png")" alt="@changeData?.IsSchacht" width="24"/>
                                </div>
                            }

                        }
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="Arbeitsbericht"  Width="150">
                    <Template>
                        <a href="@($"arbeitsscheine/{(context as Project)?.ProjectId}/{(context as Project)?.IsSchacht}")" >
                            <img src="images/arbeitsbericht.png" alt="Arbeitsbericht" width="24"/>
                        </a>
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>    
    </div>
}
<style>
    .e-grid .e-headercell {
        background-color: #a2d6f4;
        color: rgb(3, 2, 2);
    }
</style>


@code {
    private SfGrid<Project> grid = new();
    private List<Project> projects = new List<Project>();
    private IEnumerable<BauleiterDto> bauleiter = new List<BauleiterDto>();
    private bool isLoading = false;
    private EditContext? ProjectContext { get; set; }
    public Project SelectedData = new Project();

    protected override async Task OnInitializedAsync()
    {
        ProjectContext = new EditContext(new Project());
        
        await LoadBauleiter();
        await LoadProjects();
    }

    private async Task LoadProjects()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;           

            isLoading = true;

            var fetchedProjects = await ProjectService.GetProjectsAsync();

            var approle = user.Claims.FirstOrDefault(c => c.Type == "appRole")?.Value;


            if (approle == "Bauleiter")
            {
                var loggedBauleiter = bauleiter.FirstOrDefault(b => b.Email == user.Claims.First(c => c.Type == "preferred_username").Value);

                projects = fetchedProjects
                    .Where(f => f.BauleiterId == loggedBauleiter?.BauleiterId)
                    .ToList();
            }
            else
            {
                projects = fetchedProjects.ToList();
            }

            isLoading = false;
            if (projects.Count == 0)
            {
                await ToastService.ShowToast("Keine Projekte gefunden.", false);
            }
            else
            {
                await ToastService.ShowToast($"{projects.Count} Projekte erfolgreich geladen.", true);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Laden der Projektaten: {ex.Message}", false);
        }
    }

    private async Task LoadBauleiter()
    {
        try
        {
            isLoading = true;
            bauleiter = await BauleiterService.GetAllBauleiter();
            isLoading = false;  
            if (bauleiter == null || bauleiter.ToList().Count == 0)
            {
                await ToastService.ShowToast("Keine Bauleiter gefunden.", false);
            }
            else
            {
                //await ToastService.ShowToast($"{bauleiter.ToList().Count} Bauleiter erfolgreich geladen.", true);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Laden der Bauleiter: {ex.Message}", false);
        }
    }

    public void RowSelectHandler(RowSelectEventArgs<Project> args)
    {
        SelectedData = new Project() { ProjectId = args.Data.ProjectId, 
            ProjectName = args.Data.ProjectName, 
            CreatedOnUtc = args.Data.CreatedOnUtc,
            DbActive = args.Data.DbActive,
            DbChangedDate = args.Data.DbChangedDate,
            IsSchacht = args.Data.IsSchacht,
            BauleiterId = args.Data.BauleiterId,
            BauleiterFullName = args.Data.BauleiterFullName
        };
    }
    public void RowDeSelectHandler(RowDeselectEventArgs<Project> args)
    {
        SelectedData = new Project();
    }

    private async Task UpdateProject()
    {
        try
        {
            var result = await ProjectService.UpdateProjectAsync(
                SelectedData.ProjectId,
                SelectedData.DbActive,
                SelectedData.IsSchacht,
                SelectedData.BauleiterId ?? 0);

            if (result != null)
            {
                var project = projects.FirstOrDefault(p => p.ProjectId == SelectedData.ProjectId);
                if (project != null)
                {
                    project.ProjectName = SelectedData.ProjectName;
                    project.DbActive = SelectedData.DbActive;
                    project.IsSchacht = SelectedData.IsSchacht;
                    project.DbChangedDate = DateTime.Now;
                    project.BauleiterId = SelectedData.BauleiterId;
                    var bauleiterName = bauleiter.FirstOrDefault(b => b.BauleiterId == SelectedData.BauleiterId)?.FullName;
                    project.BauleiterFullName = bauleiterName;
                }

                await grid.Refresh();
                await ToastService.ShowToast("Projekt erfolgreich aktualisiert.", true);
            }
            else
            {
                await ToastService.ShowToast("Fehler beim Aktualisieren des Projekts.", false);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Aktualisieren des Projekts: {ex.Message}", false);
        }
    }    
}
