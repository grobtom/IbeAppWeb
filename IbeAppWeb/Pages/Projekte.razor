@page "/projects"
@using IbeAppWeb.DTOs
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using IbeAppWeb.Services
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@inject ProjectService ProjectService
@inject IbeToastService ToastService
@inject BauleiterService BauleiterService
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize(Roles = "Bauleiter, IbeUser,IbeAdmin")]

<h3>Projekte Management</h3>

<SfSpinner @bind-Visible="@isLoading" Label="Loading...." Type="@SpinnerType.Bootstrap"></SfSpinner>

<!-- Custom Search Box -->
<div class="mb-3" style="margin-bottom: 20px;">
    <SfTextBox @bind-Value="@searchText" Placeholder="Suchen nach Projekt, Bauleiter, Kunde oder Rechnungsnummer..." 
               @onkeyup="OnSearchKeyUp" ShowClearButton="true" Width="400px" ValueChange="OnSearchTextChanged" Input="OnSearchCleared">
    </SfTextBox>
</div>

<div class="col-lg-12">
    <EditForm Model="@SelectedData" OnValidSubmit="@UpdateProject">
        <div style="padding-top: 20px; display: flex; flex-direction: row; gap: 24px; align-items: center;">
            <div class="form-group" style="display: flex; flex-direction: column;">
                <label style="padding-bottom: 4px;">Projekt:</label>
                <SfTextBox ID="ProjectName" @bind-Value="@SelectedData.ProjectName" Placeholder="Projekt"></SfTextBox>
            </div>
            <div class="form-group" style="display: flex; flex-direction: column;">
                <label style="padding-bottom: 4px;">Bauleiter:</label>
                    <SfComboBox TValue="int?" TItem="BauleiterDto" PopupHeight="230px" Placeholder="Bauleiter:" @bind-Value="@SelectedData.BauleiterId" DataSource="@bauleiter">
                        <ComboBoxEvents TValue="int?" TItem="BauleiterDto" />
                        <ComboBoxFieldSettings Text="FullName" Value="BauleiterId" />
                    </SfComboBox>            
            </div>
            <div class="form-group" style="display: flex; flex-direction: column;">
                <label style="padding-bottom: 4px;">Aktiv</label>
                <SfSwitch @bind-Checked="@SelectedData.DbActive"></SfSwitch>
            </div>
            <div class="form-group" style="display: flex; flex-direction: column;">
                <label style="padding-bottom: 4px;">Schacht</label>
                <SfSwitch @bind-Checked="@SelectedData.IsSchacht"></SfSwitch>
            </div>
        </div>
        <div class="temp" style="margin-top: 16px;">
            <SfButton ButtonType="ButtonType.Submit">Projekt updaten</SfButton>
        </div>
    </EditForm>
</div>
<br />
@if (projects != null)
{
    <div>
        <SfGrid @ref="grid" DataSource="@filteredProjects" AllowSorting="true" AllowPaging="true" AllowSelection="true">
            <GridPageSettings PageCount="5" PageSizes="true" PageSize="10"></GridPageSettings>
            <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
            <GridEvents RowSelected="@RowSelectHandler" RowDeselected="@RowDeSelectHandler" TValue="ProjectCustomerInvoiceDto"></GridEvents>
            <GridTemplates>
                <DetailTemplate Context="detailContext">
                    @{
                        var project = (detailContext as ProjectCustomerInvoiceDto);
                    }
                    <div class="detail-container" style="padding: 20px; background-color: #f8f9fa;">
                        <!-- Customer Information Section -->
                        @if (project?.Customer != null)
                        {
                            <div class="customer-section" style="margin-bottom: 20px;">
                                <h5 style="color: #0a76ff; margin-bottom: 10px;">Kunde Informationen</h5>
                                <div class="row">
                                    <div class="col-md-6">
                                        <table class="table table-sm">
                                            <tbody>
                                                <tr>
                                                    <td><strong>Kunde ID:</strong></td>
                                                    <td>@project.Customer.CustomerId</td>
                                                </tr>
                                                <tr>
                                                    <td><strong>Typ:</strong></td>
                                                    <td>@(project.Customer.CompanyPrivate ? "Firma" : "Privatperson")</td>
                                                </tr>
                                                @if (!project.Customer.CompanyPrivate)
                                                {
                                                    <tr>
                                                        <td><strong>Name:</strong></td>
                                                        <td>@project.Customer.FirstName @project.Customer.LastName</td>
                                                    </tr>
                                                }
                                                else
                                                {
                                                    <tr>
                                                        <td><strong>Firma:</strong></td>
                                                        <td>@project.Customer.CompanyName</td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                    <div class="col-md-6">
                                        <table class="table table-sm">
                                            <tbody>
                                                <tr>
                                                    <td><strong>Telefon:</strong></td>
                                                    <td>@project.Customer.Telephone</td>
                                                </tr>
                                                <tr>
                                                    <td><strong>Mobil:</strong></td>
                                                    <td>@project.Customer.Mobile</td>
                                                </tr>
                                                <tr>
                                                    <td><strong>Email:</strong></td>
                                                    <td>@project.Customer.Email</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        }

                        <!-- Invoices Section -->
                        @if (project?.Invoices != null && project.Invoices.Any())
                        {
                            <div class="invoices-section">
                                <h5 style="color: #0a76ff; margin-bottom: 10px;">Rechnungen</h5>
                                <SfGrid DataSource="@project.Invoices" AllowPaging="true" AllowSorting="true" Height="250px">
                                    <GridPageSettings PageCount="3" PageSize="5"></GridPageSettings>
                                    <GridColumns>
                                        <GridColumn Field="@nameof(XInvoice.XInvoiceId)" HeaderText="Rechnung ID" Width="120"></GridColumn>
                                        <GridColumn Field="@nameof(XInvoice.InvoiceNumber)" HeaderText="Rechnungsnummer" Width="150"></GridColumn>
                                        <GridColumn Field="@nameof(XInvoice.InvoiceDate)" HeaderText="Rechnungsdatum" Format="dd.MM.yyyy" Width="150"></GridColumn>
                                        <GridColumn Field="@nameof(XInvoice.InvoiceAmount)" HeaderText="Betrag" Format="C2" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                                    </GridColumns>
                                    <GridAggregates>
                                        <GridAggregate>
                                            <GridAggregateColumns>
                                                <GridAggregateColumn Field="@nameof(XInvoice.InvoiceAmount)" Type="AggregateType.Sum" Format="C2">
                                                    <FooterTemplate>
                                                        @{
                                                            var aggregate = (context as AggregateTemplateContext);
                                                            <div>
                                                                <strong>Gesamtsumme: @aggregate?.Sum</strong>
                                                            </div>
                                                        }
                                                    </FooterTemplate>
                                                </GridAggregateColumn>
                                            </GridAggregateColumns>
                                        </GridAggregate>
                                    </GridAggregates>
                                </SfGrid>
                            </div>
                        }
                        else
                        {
                            <div class="no-invoices">
                                <p style="color: #6c757d; font-style: italic;">Keine Rechnungen für dieses Projekt vorhanden.</p>
                            </div>
                        }
                    </div>
                </DetailTemplate>
            </GridTemplates>
            <GridColumns>
                <GridColumn Field=@nameof(ProjectCustomerInvoiceDto.ProjectId) HeaderText="Projekt ID" Width="120" IsPrimaryKey="true"></GridColumn>
                <GridColumn Field=@nameof(ProjectCustomerInvoiceDto.ProjectName) HeaderText="Projekt Name" Width="150"></GridColumn>
                <GridColumn Field=@nameof(ProjectCustomerInvoiceDto.BauleiterFullName) HeaderText="Bauleiter" Width="150"></GridColumn>
                <GridColumn Field=@nameof(ProjectCustomerInvoiceDto.CreatedOnUtc) HeaderText="Erstellt am: (UTC)" Width="200" Type="ColumnType.DateTime"></GridColumn>
                <GridColumn Field=@nameof(ProjectCustomerInvoiceDto.DbActive) HeaderText="Aktiv" Format="d" Width="150">
                    <Template>
                        @{
                            var changeData = (context as ProjectCustomerInvoiceDto);
                            if (changeData?.DbActive == true)
                            {
                                <div class="image">
                                <img src="@($"images/activproject.png")" alt="@changeData?.DbActive" width="24"/>
                                </div>
                            }
                            else
                            {
                                <div class="image"> 
                                <img src="@($"images/stop-icon.png")" alt="@changeData?.DbActive" width="24"/>
                                </div>
                            }
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(ProjectCustomerInvoiceDto.IsSchacht) HeaderText="Kanal/Schacht" Format="d" Width="150">
                    <Template>
                        @{
                            var changeData = (context as ProjectCustomerInvoiceDto); 
                            if (changeData?.IsSchacht == true)
                            {
                                <div class="image">
                                <img src="@($"images/schacht.png")" alt="@changeData?.IsSchacht" width="24"/>
                                </div>
                            }
                            else
                            {
                                <div class="image"> 
                                <img src="@($"images/rohr.png")" alt="@changeData?.IsSchacht" width="24"/>
                                </div>
                            }

                        }
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="Arbeitsbericht"  Width="150">
                    <Template>
                        <a href="@($"arbeitsscheine/{(context as ProjectCustomerInvoiceDto)?.ProjectId}/{(context as ProjectCustomerInvoiceDto)?.IsSchacht}")">
                            <img src="images/arbeitsbericht.png" alt="Arbeitsbericht" width="24"/>
                        </a>
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>    
    </div>
}
<style>
    .e-grid .e-headercell {
        background-color: #a2d6f4;
        color: rgb(3, 2, 2);
    }
</style>


@code {
    private SfGrid<ProjectCustomerInvoiceDto> grid = new();
    private List<ProjectCustomerInvoiceDto> projects = new List<ProjectCustomerInvoiceDto>();
    private List<ProjectCustomerInvoiceDto> filteredProjects = new List<ProjectCustomerInvoiceDto>();
    private IEnumerable<BauleiterDto> bauleiter = new List<BauleiterDto>();
    private bool isLoading = false;
    private string searchText = "";
    private EditContext? ProjectContext { get; set; }
    public ProjectCustomerInvoiceDto SelectedData = new ProjectCustomerInvoiceDto();

    protected override async Task OnInitializedAsync()
    {
        ProjectContext = new EditContext(new ProjectCustomerInvoiceDto());
        
        await LoadBauleiter();
        await LoadProjects();
    }

    private async Task LoadProjects()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;           

            isLoading = true;

            var fetchedProjects = await ProjectService.GetProjectsAsync();

            if (fetchedProjects == null)
            {
                projects = new List<ProjectCustomerInvoiceDto>();
                filteredProjects = new List<ProjectCustomerInvoiceDto>();
                isLoading = false;
                await ToastService.ShowToast("Keine Projekte gefunden.", false);
                return;
            }

            var approle = user.Claims.FirstOrDefault(c => c.Type == "appRole")?.Value;

            if (approle == "Bauleiter")
            {
                var loggedBauleiter = bauleiter.FirstOrDefault(b => b.Email == user.Claims.First(c => c.Type == "preferred_username").Value);

                projects = fetchedProjects
                    .Where(f => f.BauleiterId == loggedBauleiter?.BauleiterId)
                    .ToList();
            }
            else
            {
                projects = fetchedProjects.ToList();
            }

            filteredProjects = projects.ToList();

            isLoading = false;
            if (projects.Count == 0)
            {
                await ToastService.ShowToast("Keine Projekte gefunden.", false);
            }
            else
            {
                await ToastService.ShowToast($"{projects.Count} Projekte erfolgreich geladen.", true);
            }
        }
        catch (Exception ex)
        {
            isLoading = false;
            await ToastService.ShowToast($"Fehler beim Laden der Projektaten: {ex.Message}", false);
        }
    }

    private async Task LoadBauleiter()
    {
        try
        {
            isLoading = true;
            bauleiter = await BauleiterService.GetAllBauleiter();
            isLoading = false;  
            if (bauleiter == null || bauleiter.ToList().Count == 0)
            {
                await ToastService.ShowToast("Keine Bauleiter gefunden.", false);
            }
        }
        catch (Exception ex)
        {
            isLoading = false;
            await ToastService.ShowToast($"Fehler beim Laden der Bauleiter: {ex.Message}", false);
        }
    }

    public void RowSelectHandler(RowSelectEventArgs<ProjectCustomerInvoiceDto> args)
    {
        SelectedData = new ProjectCustomerInvoiceDto()
        {
            ProjectId = args.Data.ProjectId,
            ProjectName = args.Data.ProjectName, 
            CreatedOnUtc = args.Data.CreatedOnUtc,
            DbActive = args.Data.DbActive,
            DbChangedDate = args.Data.DbChangedDate,
            IsSchacht = args.Data.IsSchacht,
            BauleiterId = args.Data.BauleiterId,
            CustomerId = args.Data.CustomerId,
            Customer = args.Data.Customer,
            Invoices = args.Data.Invoices,
            BauleiterFullName = args.Data.BauleiterFullName
        };
    }

    public void RowDeSelectHandler(RowDeselectEventArgs<ProjectCustomerInvoiceDto> args)
    {
        SelectedData = new ProjectCustomerInvoiceDto();
    }

    private void OnSearchTextChanged(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        searchText = args.Value ?? "";
        PerformSearch();
    }

    private void OnSearchKeyUp(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs e)
    {
        PerformSearch();
    }

    private void OnSearchCleared(Syncfusion.Blazor.Inputs args)
    {
        searchText = "";
        PerformSearch();
    }

    private void PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            filteredProjects = projects.ToList();
        }
        else
        {
            var searchLower = searchText.ToLower();
            filteredProjects = projects.Where(p => 
                (p.ProjectName?.ToLower().Contains(searchLower) ?? false) ||
                (p.BauleiterFullName?.ToLower().Contains(searchLower) ?? false) ||
                (p.Customer?.CompanyName?.ToLower().Contains(searchLower) ?? false) ||
                (p.Customer?.FirstName?.ToLower().Contains(searchLower) ?? false) ||
                (p.Customer?.LastName?.ToLower().Contains(searchLower) ?? false) ||
                (p.Invoices?.Any(i => i.InvoiceNumber?.ToString().Contains(searchLower) ?? false) ?? false)
            ).ToList();
        }
        
        StateHasChanged();
    }

    private async Task UpdateProject()
    {
        try
        {
            var result = await ProjectService.UpdateProjectAsync(
                SelectedData.ProjectId,
                SelectedData.DbActive,
                SelectedData.IsSchacht,
                SelectedData.BauleiterId ?? 0,
                SelectedData.CustomerId ?? 0
            );

            if (result != null)
            {
                var project = projects.FirstOrDefault(p => p.ProjectId == SelectedData.ProjectId);
                if (project != null)
                {
                    project.ProjectName = SelectedData.ProjectName;
                    project.DbActive = SelectedData.DbActive;
                    project.IsSchacht = SelectedData.IsSchacht;
                    project.DbChangedDate = DateTime.Now;
                    project.BauleiterId = SelectedData.BauleiterId;
                    var bauleiterName = bauleiter.FirstOrDefault(b => b.BauleiterId == SelectedData.BauleiterId)?.FullName;
                    project.BauleiterFullName = bauleiterName;
                    
                    // Update filtered projects as well
                    var filteredProject = filteredProjects.FirstOrDefault(p => p.ProjectId == SelectedData.ProjectId);
                    if (filteredProject != null)
                    {
                        filteredProject.ProjectName = SelectedData.ProjectName;
                        filteredProject.DbActive = SelectedData.DbActive;
                        filteredProject.IsSchacht = SelectedData.IsSchacht;
                        filteredProject.DbChangedDate = DateTime.Now;
                        filteredProject.BauleiterId = SelectedData.BauleiterId;
                        filteredProject.BauleiterFullName = bauleiterName;
                    }
                }

                await grid.Refresh();
                await ToastService.ShowToast("Projekt erfolgreich aktualisiert.", true);
            }
            else
            {
                await ToastService.ShowToast("Fehler beim Aktualisieren des Projekts.", false);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Aktualisieren des Projekts: {ex.Message}", false);
        }
    }    
}