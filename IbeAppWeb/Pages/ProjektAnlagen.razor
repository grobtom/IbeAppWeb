@page "/project-anlage"
@using IbeAppWeb.DTOs
@using IbeAppWeb.Services
@inject ProjectAnlageService ProjectAnlageService
@inject ProjectService ProjectService

<h3>Project Anlage Management</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<label for="projectSelect">Select Project:</label>
<select id="projectSelect" @bind="projectId">
    @foreach (var project in projects)
    {
        <option value="@project.ProjectId">@project.ProjectName</option>
    }
</select>

<label for="existingAnlageSelect">Bestehende Anlage:</label>
<select id="existingAnlageSelect" @bind="oldAnlageId">
    @foreach (var anlage in anlagenList)
    {
        <option value="@anlage.AnlageId">@anlage.AnlageName</option>
    }
</select>

<label for="newAnlageSelect">Neue Anlage:</label>
<select id="newAnlageSelect" @bind="newAnlageId">
    @foreach (var anlage in anlagenList)
    {
        <option value="@anlage.AnlageId">@anlage.AnlageName</option>
    }
</select>

<button @onclick="AssignAnlage">Anlage Zuordnen</button>
<button @onclick="UpdateAnlage">Update Zuordnung</button>
<button @onclick="RemoveAnlage">Lösche Zuordnung</button>
<button @onclick="GetProjectAnlage">Zeige Anlagen</button>
<button @onclick="GetAllProjectAnlagen">Zeige alle Projekte</button>

@if (anlagen != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Project ID</th>
                <th>Project Name</th>
                <th>Anlagen</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in projects)
            {
                var projectAnlagen = anlagen.Where(a => a.ProjectId == project.ProjectId);
                <tr>
                    <td>@project.ProjectId</td>
                    <td>@project.ProjectName</td>
                    <td>
                        <ul>
                            @foreach (var anlage in projectAnlagen)
                            {
                                <li>ID: @anlage.AnlageId, Name: @anlage.AnlageName</li>
                            }
                        </ul>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private int projectId;
    private int oldAnlageId;
    private int newAnlageId;
    private string errorMessage;    
    private IEnumerable<ProjectAnlageDto> anlagen;
    private IEnumerable<ProjectWithAnlagenDto> allAnlagen;
    private IEnumerable<Project> projects;
    private IEnumerable<AnlageDto> anlagenList;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            projects = await ProjectService.GetActiveProjectsAsync();
            anlagenList = await ProjectAnlageService.GetAllAnlagen();
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Laden der Daten: {ex.Message}";
        }
    }


    private async Task AssignAnlage()
    {
        try
        {
            if (newAnlageId > 0 && projectId > 0)
            {
                await ProjectAnlageService.AssignAnlageToProject(new AssignAnlageToProjectDto { ProjectId = projectId, AnlageId = newAnlageId });
                await GetProjectAnlage();
            }
            else
            {
                errorMessage = "Bitte wählen Sie sowohl ein Projekt als auch eine neue Anlage aus.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Zuweisen der Anlage: {ex.Message}";
        }
    }

    private async Task UpdateAnlage()
    {
        try
        {
            if (oldAnlageId > 0 && projectId > 0 && newAnlageId > 0)
            {
                await ProjectAnlageService.UpdateAssignment(new UpdateProjectAnlageDto { ProjectId = projectId, OldAnlageId = oldAnlageId, NewAnlageId = newAnlageId });
                await GetProjectAnlage();
            }
            else
            {
                errorMessage = "Bitte wählen Sie sowohl ein Projekt als auch eine bestehende Anlage aus.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Aktualisieren der Anlage: {ex.Message}";
        }
    }

    private async Task RemoveAnlage()
    {
        await ProjectAnlageService.RemoveAssignment(projectId, oldAnlageId);
    }

    private async Task GetProjectAnlage()
    {
        anlagen = await ProjectAnlageService.GetAnlagenForProject(projectId);
    }

    private async Task GetAllProjectAnlagen()
    {
        allAnlagen = await ProjectAnlageService.GetAllProjectAnlagen();
    }
}