@page "/project-anlage"
@using IbeAppWeb.DTOs
@using IbeAppWeb.Services
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Spinner
@inject ProjectAnlageService ProjectAnlageService
@inject ProjectService ProjectService
@inject IbeToastService ToastService

<h3>Project Anlage Management</h3>

<div class="col-lg-4 control-section sb-property-border">
    <div class="control-wrapper">
        <label class="example-label">Wähle Projekt:</label>
        <SfComboBox TValue="int?" TItem="Project" PopupHeight="230px" Placeholder="Projekt" SortOrder="Syncfusion.Blazor.DropDowns.SortOrder.Ascending" @bind-Value="@projectId" DataSource="@projects">
            <ComboBoxEvents TValue="int?" TItem="Project" ValueChange="OnChange" />
            <ComboBoxFieldSettings Text="ProjectName" Value="ProjectId" />
        </SfComboBox>
    </div>
</div>

<div class="col-lg-4 control-section sb-property-border">
    <div class="control-wrapper">
        <label class="example-label">Bestehende Anlage:</label>
        <SfComboBox TValue="int?" TItem="ProjectAnlageDto" PopupHeight="230px" Placeholder="Bestehende Anlage(n)" @bind-Value="@oldAnlageId" DataSource="@anlagen">
            <ComboBoxEvents TValue="int?" TItem="ProjectAnlageDto" />
            <ComboBoxFieldSettings Text="AnlageName" Value="AnlageId" />
        </SfComboBox>
    </div>
</div>

<div class="col-lg-4 control-section sb-property-border">
    <div class="control-wrapper">
        <label class="example-label">Neue Anlage:</label>
        <SfComboBox TValue="int?" TItem="AnlageDto" PopupHeight="230px" Placeholder="Neue Anlage" SortOrder="Syncfusion.Blazor.DropDowns.SortOrder.Ascending" @bind-Value="@newAnlageId" DataSource="@anlagenList">
            <ComboBoxEvents TValue="int?" TItem="AnlageDto" />
            <ComboBoxFieldSettings Text="AnlageName" Value="AnlageId" />
        </SfComboBox>
    </div>
</div>
<br />
<div class="row">
    <SfButtonGroup Mode="Syncfusion.Blazor.SplitButtons.SelectionMode.Single">
        <ButtonGroupButton @onclick="@AssignAnlage">Anlage zuordnen</ButtonGroupButton>
        <ButtonGroupButton @onclick="@UpdateAnlage">Update Zuordnung</ButtonGroupButton>
        <ButtonGroupButton @onclick="@RemoveAnlage">Lösche Zuordnung</ButtonGroupButton>
@*         <ButtonGroupButton @onclick="@GetAllProjectAnlagen">Zeige alle Projekte</ButtonGroupButton>
 *@    </SfButtonGroup>
</div>
<br />
@if (allAnlagen is null)
{
    <p>Lade Daten...</p>
    <div id="container">
        <SfSpinner @bind-Visible="@isLoading" Label="Loading...." Type="@SpinnerType.Bootstrap">
        </SfSpinner>
    </div>
}
else
{
    <SfGrid @ref="grid" DataSource="@allAnlagen" 
        AllowSorting="true" 
        AllowFiltering="true" 
        AllowPaging="true" 
        Height="400">
        <GridPageSettings PageCount="5" PageSizes="true" PageSize="10"></GridPageSettings>
        <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
        <GridEvents RowSelecting="RowselectingHandler" TValue="ProjectWithAnlagenDto"></GridEvents>
        <GridColumns>
            <GridColumn Field="ProjectId" HeaderText="Project ID" TextAlign="TextAlign.Center" Width="100"></GridColumn>
            <GridColumn Field="ProjectName" HeaderText="Projektname" TextAlign="TextAlign.Left" Width="200"></GridColumn>
            <GridColumn HeaderText="Anlagen" TextAlign="TextAlign.Left" Width="300">
                <Template>
                    @{
                        var project = (context as ProjectWithAnlagenDto);
                    }
                    <ul>
                        @if (project?.Anlagen == null || !project.Anlagen.Any())
                        {
                            <li>Keine Anlagen zugeordnet.</li>
                        }
                        else
                        {
                            @foreach (var anlage in project.Anlagen)
                            {
                                <li>@anlage.AnlageName</li>
                            }
                        }
                    </ul>
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}

<style>
    .e-grid .e-headercell {
        background-color: #a2d6f4;
        color: rgb(3, 2, 2);
    }
</style>

@code {
    private int? projectId;
    private int? oldAnlageId;
    private int? newAnlageId;
    private SfGrid<ProjectWithAnlagenDto>? grid;
    private IEnumerable<ProjectAnlageDto>? anlagen;
    private IEnumerable<ProjectWithAnlagenDto>? allAnlagen;
    private IEnumerable<Project>? projects;
    private IEnumerable<AnlageDto>? anlagenList;
    private ProjectAnlageDto projectAnlage = new ();
    private ProjectWithAnlagenDto projectWithAnlagen = new();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            projects = await ProjectService.GetActiveProjectsSimpleAsync();
            anlagenList = await ProjectAnlageService.GetAllAnlagen();
            await GetAllProjectAnlagen();
            if (projects == null || !projects.Any())
            {
                await ToastService.ShowToast("Keine Projekte gefunden.", false);
            }
            if (anlagenList == null || !anlagenList.Any())
            {
                await ToastService.ShowToast("Keine Anlagen gefunden.", false);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Laden der Daten: {ex.Message}", false);
        }
        finally
        {
            isLoading = false;
        }
    }


    private async Task AssignAnlage()
    {
        try
        {
            if (newAnlageId > 0 && projectId > 0)
            {
                if (IsAnlageAlreadyAssigned(projectId.Value, newAnlageId.Value))
                {
                    await ToastService.ShowToast("Diese Anlage ist bereits dem Projekt zugeordnet.", false);
                    return;
                }

                var result = await ProjectAnlageService.AssignAnlageToProject(new AssignAnlageToProjectDto { ProjectId = projectId.Value, AnlageId = newAnlageId.Value });
                if (result)
                {
                    projectAnlage = new();

                    await GetAllProjectAnlagen();

                    await UpdateLocalAnlagenForProject();

                    newAnlageId = null;
                    StateHasChanged();
                    await ToastService.ShowToast("Anlage erfolgreich zugewiesen.", true);
                }
                else
                {
                    await ToastService.ShowToast("Fehler bei der Zuweisung der Anlage.", false);
                }
            }
            else
            {
                await ToastService.ShowToast("Bitte wählen Sie sowohl ein Projekt als auch eine neue Anlage aus.", false);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Zuweisen der Anlage: {ex.Message}", false);
        }
    }

    private async Task UpdateAnlage()
    {
        try
        {
            if (oldAnlageId > 0 && projectId > 0 && newAnlageId > 0)
            {
                var result = await ProjectAnlageService.UpdateAssignment(new UpdateProjectAnlageDto
                {
                    ProjectId = projectId.Value,
                    OldAnlageId = oldAnlageId.Value,
                    NewAnlageId = newAnlageId.Value
                });
                if (result)
                {
                    projectAnlage = new();
                    await GetAllProjectAnlagen();
                    await UpdateLocalAnlagenForProject();
                    newAnlageId = null;
                    await ToastService.ShowToast("Anlage erfolgreich aktualisiert.", true);
                }
                else
                {
                    await ToastService.ShowToast("Fehler beim Aktualisieren der Anlage.", false);
                }
            }
            else
            {
                await ToastService.ShowToast("Bitte wählen Sie sowohl ein Projekt als auch eine bestehende Anlage aus.", false);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Aktualisieren der Anlage: {ex.Message}", false);
        }
    }

    private async Task RemoveAnlage()
    {
        try
        {
            if (oldAnlageId.HasValue && projectId.HasValue)
            {
                var response = await ProjectAnlageService.RemoveAssignment(projectId.Value, oldAnlageId.Value);
                if (response)
                {
                    projectAnlage = new();
                    await GetAllProjectAnlagen();
                    await UpdateLocalAnlagenForProject();
                    oldAnlageId = null;
                    await ToastService.ShowToast("Anlage erfolgreich entfernt.", true);
                }
                else
                {
                    await ToastService.ShowToast("Fehler beim Entfernen der Anlage.", false);
                }
            }
            else
            {
                await ToastService.ShowToast("Bitte wählen Sie ein Projekt und eine bestehende Anlage aus.", false);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Fehler beim Entfernen der Anlage: {ex.Message}", false);
        }
    }

    private bool IsAnlageAlreadyAssigned(int projectId, int anlageId)
    {
        var projectWithAnlagen = allAnlagen?.FirstOrDefault(p => p.ProjectId == projectId);
        if (projectWithAnlagen?.Anlagen != null)
        {
            return projectWithAnlagen.Anlagen.Any(a => a.AnlageId == anlageId);
        }

        if (anlagen != null)
        {
            return anlagen.Any(a => a.AnlageId == anlageId);
        }

        return false;
    }

    private async Task UpdateLocalAnlagenForProject()
    {
        if (projectId.HasValue && allAnlagen != null)
        {
            var projectWithAnlagen = allAnlagen.FirstOrDefault(p => p.ProjectId == projectId.Value);
            if (projectWithAnlagen != null)
            {
                anlagen = projectWithAnlagen.Anlagen.Select(a => new ProjectAnlageDto
                {
                    ProjectId = projectWithAnlagen.ProjectId,
                    AnlageId = a.AnlageId,
                    AnlageName = a.AnlageName
                }).ToList();

                if (oldAnlageId.HasValue && !anlagen.Any(a => a.AnlageId == oldAnlageId.Value))
                {
                    oldAnlageId = null;
                }
            }
        }
        await Task.CompletedTask;
    }

    private async Task GetProjectAnlage()
    {
        if (projectId.HasValue)
        {
            try
            {
                var updatedAnlagen = await ProjectAnlageService.GetAnlagenForProject(projectId!.Value);
                projectWithAnlagen = updatedAnlagen;

                if (updatedAnlagen?.Anlagen != null && updatedAnlagen.Anlagen.Any())
                {
                    anlagen = updatedAnlagen.Anlagen.Select(a => new ProjectAnlageDto
                    {
                        ProjectId = updatedAnlagen.ProjectId,
                        AnlageId = a.AnlageId,
                        AnlageName = a.AnlageName
                    }).ToList();
                }
                else
                {
                    anlagen = new List<ProjectAnlageDto>();
                    await ToastService.ShowToast("Keine Anlagen für das ausgewählte Projekt gefunden.", false);
                }
            }
            catch (Exception ex)
            {
                await ToastService.ShowToast($"Fehler beim Laden der Projektanlagen: {ex.Message}", false);
                anlagen = new List<ProjectAnlageDto>();
            }
        }
        else
        {
            await ToastService.ShowToast("Projekt-ID ist nicht gesetzt.", false);
        }
    }

    private async Task GetAllProjectAnlagen()
    {
        allAnlagen = await ProjectAnlageService.GetAllProjectAnlagen();
        if (allAnlagen == null || !allAnlagen.Any())
        {
            await ToastService.ShowToast($"Keine Anlagen für die Projekte gefunden.", false);
        }
    }

    private Task OnChange(ChangeEventArgs<int?, Project> args)
    {
        if (args.ItemData == null)
        {
            return Task.CompletedTask; 
        }
        var selectedProject = args.ItemData;
        projectId = selectedProject.ProjectId;

        var projectWithAnlagen = allAnlagen?.FirstOrDefault(p => p.ProjectId == projectId);
        if (projectWithAnlagen != null)
        {
            anlagen = null;
            anlagen = projectWithAnlagen.Anlagen.Select(a => new ProjectAnlageDto
            {
                ProjectId = projectWithAnlagen.ProjectId,
                AnlageId = a.AnlageId,
                AnlageName = a.AnlageName
            }).ToList();

            if (anlagen.Any())
            {
                oldAnlageId = anlagen.First().AnlageId;
            }
            else
            {
                oldAnlageId = null;
            }

            StateHasChanged();
            return Task.CompletedTask;
        }

        return GetProjectAnlage();
    }

    private Task RowselectingHandler(RowSelectingEventArgs<ProjectWithAnlagenDto> args)
    {
        if (args.Data != null)
        {
            projectId = args.Data.ProjectId;

            anlagen = args.Data.Anlagen.Select(a => new ProjectAnlageDto
            {
                ProjectId = args.Data.ProjectId,
                AnlageId = a.AnlageId,
                AnlageName = a.AnlageName
            }).ToList();

            if (anlagen.Any())
            {
                oldAnlageId = anlagen.First().AnlageId;
            }
            else
            {
                oldAnlageId = null;
            }

            StateHasChanged();
        }
        return Task.CompletedTask;
    }

}