@page "/project-anlage"
@using IbeAppWeb.DTOs
@using IbeAppWeb.Services
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.Grids
@inject ProjectAnlageService ProjectAnlageService
@inject ProjectService ProjectService

<h3>Project Anlage Management</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<div class="col-lg-4 control-section sb-property-border">
    <div class="control-wrapper">
        <label class="example-label">Wähle Projekt:</label>
        <SfComboBox TValue="int?" TItem="Project" PopupHeight="230px" Placeholder="Projekt" SortOrder="Syncfusion.Blazor.DropDowns.SortOrder.Ascending" @bind-Value="@projectId" DataSource="@projects">
            <ComboBoxEvents TValue="int?" TItem="Project" ValueChange="OnChange" />
            <ComboBoxFieldSettings Text="ProjectName" Value="ProjectId" />
        </SfComboBox>
    </div>
</div>

<div class="col-lg-4 control-section sb-property-border">
    <div class="control-wrapper">
        <label class="example-label">Bestehende Anlage:</label>
        <SfComboBox TValue="int?" TItem="ProjectAnlageDto" PopupHeight="230px" Placeholder="Bestehende Anlage(n)" @bind-Value="@oldAnlageId" DataSource="@anlagen">
            <ComboBoxEvents TValue="int?" TItem="ProjectAnlageDto" />
            <ComboBoxFieldSettings Text="AnlageName" Value="AnlageId" />
        </SfComboBox>
    </div>
</div>

<div class="col-lg-4 control-section sb-property-border">
    <div class="control-wrapper">
        <label class="example-label">Neue Anlage:</label>
        <SfComboBox TValue="int?" TItem="AnlageDto" PopupHeight="230px" Placeholder="Neue Anlage" SortOrder="Syncfusion.Blazor.DropDowns.SortOrder.Ascending" @bind-Value="@newAnlageId" DataSource="@anlagenList">
            <ComboBoxEvents TValue="int?" TItem="AnlageDto" />
            <ComboBoxFieldSettings Text="AnlageName" Value="AnlageId" />
        </SfComboBox>
    </div>
</div>
<br/>
<div class="row">
                <SfButtonGroup Mode="Syncfusion.Blazor.SplitButtons.SelectionMode.Single">
                    <ButtonGroupButton @onclick="@AssignAnlage">Anlage zuordnen</ButtonGroupButton>
                    <ButtonGroupButton @onclick="@UpdateAnlage">Update Zuordnung</ButtonGroupButton>
                    <ButtonGroupButton @onclick="@RemoveAnlage">Lösche Zuordnung</ButtonGroupButton>
                    <ButtonGroupButton @onclick="@GetAllProjectAnlagen">Zeige alle Projekte</ButtonGroupButton>
                </SfButtonGroup>
</div>
<br/>
@if (allAnlagen != null)
{
    <SfGrid DataSource="@allAnlagen" AllowSorting="true" AllowFiltering="true" AllowPaging="true" AllowSelection="true">
        <GridPageSettings PageCount="5" PageSizes="true" PageSize="10"></GridPageSettings>
        <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="SelectionType.Single"></GridSelectionSettings>
        <GridEvents RowSelecting="RowselectingHandler" TValue="ProjectWithAnlagenDto"></GridEvents>
        <GridColumns>
            <!-- Project ID Column -->
            <GridColumn Field="ProjectId" HeaderText="Project ID" TextAlign="TextAlign.Center" Width="100"></GridColumn>

            <!-- Project Name Column -->
            <GridColumn Field="ProjectName" TextAlign="TextAlign.Left" Width="200">
            <HeaderTemplate>
                <div>
                    <span class="e-icon-userlogin e-icons employee"></span> Projekt Name
                </div>
            </HeaderTemplate>
            </GridColumn>
            <!-- Anlagen Column with Template -->
            <GridColumn HeaderText="Anlagen" TextAlign="TextAlign.Left" Width="300">
                <Template>
                    @{
                        var project = (context as ProjectWithAnlagenDto);
                    }
                    <ul>
                        @foreach (var anlage in project.Anlagen)
                        {
                            <li>ID: @anlage.AnlageId, Name: @anlage.AnlageName</li>
                        }
                    </ul>
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}


@code {
    private int? projectId;
    private int? oldAnlageId;
    private int? newAnlageId;
    private string errorMessage;    
    private IEnumerable<ProjectAnlageDto> anlagen;
    private IEnumerable<ProjectWithAnlagenDto> allAnlagen;
    private IEnumerable<Project> projects;
    private IEnumerable<AnlageDto> anlagenList;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            projects = await ProjectService.GetActiveProjectsAsync();
            anlagenList = await ProjectAnlageService.GetAllAnlagen();
            await GetAllProjectAnlagen();
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Laden der Daten: {ex.Message}";
        }
    }


    private async Task AssignAnlage()
    {
        try
        {
            if (newAnlageId > 0 && projectId > 0)
            {
                await ProjectAnlageService.AssignAnlageToProject(new AssignAnlageToProjectDto { ProjectId = projectId.Value, AnlageId = newAnlageId.Value });
                await GetProjectAnlage();
                await GetAllProjectAnlagen();
            }
            else
            {
                errorMessage = "Bitte wählen Sie sowohl ein Projekt als auch eine neue Anlage aus.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Zuweisen der Anlage: {ex.Message}";
        }
    }

    private async Task UpdateAnlage()
    {
        try
        {
            if (oldAnlageId > 0 && projectId > 0 && newAnlageId > 0)
            {
                await ProjectAnlageService.UpdateAssignment(new UpdateProjectAnlageDto { 
                        ProjectId = projectId.Value, 
                        OldAnlageId = oldAnlageId.Value, 
                        NewAnlageId = newAnlageId.Value 
                });
                await GetProjectAnlage();
                await GetAllProjectAnlagen();
            }
            else
            {
                errorMessage = "Bitte wählen Sie sowohl ein Projekt als auch eine bestehende Anlage aus.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Aktualisieren der Anlage: {ex.Message}";
        }
    }

    private async Task RemoveAnlage()
    {
        await ProjectAnlageService.RemoveAssignment(projectId.Value, oldAnlageId.Value);
        await GetProjectAnlage();
        await GetAllProjectAnlagen();
    }

    private async Task GetProjectAnlage()
    {
        anlagen = await ProjectAnlageService.GetAnlagenForProject(projectId.Value);
        if (anlagen == null || !anlagen.Any())
        {
            errorMessage = "Keine Anlagen für das ausgewählte Projekt gefunden.";
        }
        else
        {
            errorMessage = string.Empty; // Clear any previous error message
        }
    }

    private async Task GetAllProjectAnlagen()
    {
        allAnlagen = await ProjectAnlageService.GetAllProjectAnlagen();
        if (allAnlagen == null || !allAnlagen.Any())
        {
            errorMessage = "Keine Anlagen für die Projekte gefunden.";
        }
        else
        {
            errorMessage = string.Empty; // Clear any previous error message
        }
    }

    private async Task OnProjectChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var selectedProjectId))
        {
            projectId = selectedProjectId;
            await GetProjectAnlage(); // Load Anlagen for the selected project
        }
    }

    private async Task OnChange(ChangeEventArgs<int?, Project> args)
    {
        if (args.Value == null)
        {
            return; // No project selected
        }   
        projectId = args.Value; // Update the selected project ID
        await GetProjectAnlage(); // Load Anlagen for the selected project
    }

    private async Task RowselectingHandler(RowSelectingEventArgs<ProjectWithAnlagenDto> args)
    {
        if (args.Data != null)
        {
            projectId = args.Data.ProjectId; // Update the selected project ID
            await GetProjectAnlage(); // Load Anlagen for the selected project
        }
    }

}