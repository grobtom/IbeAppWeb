@page "/arbeitsberichtmonteur"
@using IbeAppWeb.DTOs
@using IbeAppWeb.Forms
@using IbeAppWeb.Services
@inject ArbeitsscheinService ArbeitsscheinService
@inject ProjectService ProjectService
@inject IbeToastService ToastService
@inject IJSRuntime JS
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns

<h3>Arbeitsberichte</h3>

<EditForm Model="@formModel" OnValidSubmit="LoadArbeitsscheine">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container mt-4">
        <div class="row mb-3">           
           <div class="col-md-4">
                <label class="form-label">Bereich:</label>
                <SfComboBox TValue="int" TItem="KanalSchacht" PopupHeight="230px" 
                    @bind-value="@ComboBoxValue" DataSource="@kanalSchachtList" Enabled="true">
                    <ComboBoxEvents TValue="int" TItem="KanalSchacht" />
                    <ComboBoxFieldSettings Text="Auswahl" Value="Id" />
                </SfComboBox>
            </div>
            <div class="col-md-4">
                <label for="saniertAmVon" class="form-label">Saniert Am Von:</label>
                <InputDate id="saniertAmVon" class="form-control" @bind-Value="formModel.SaniertAmVon" disabled="@IsSaniertAmUsed" />
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-4">
                <label for="saniertAmBis" class="form-label">Saniert Am Bis:</label>
                <InputDate id="saniertAmBis" class="form-control" @bind-Value="formModel.SaniertAmBis" disabled="@IsSaniertAmUsed" />
            </div>
            <div class="col-md-4">
                <label for="saniertAm" class="form-label">Saniert Am:</label>
                <InputDate id="saniertAm" class="form-control" @bind-Value="formModel.SaniertAm" @onchange="OnSaniertAmChanged" />
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-4">
                <label for="monteurName" class="form-label">Monteurname:</label>
                <InputText id="monteurName" class="form-control" @bind-Value="formModel.Monteurname" />
            </div>
            <div class="col-md-4 d-flex align-items-end">
                <button class="btn btn-primary me-2" type="submit" disabled="@isLoading">Lade Arbeitsberichte</button>
                <button class="btn btn-secondary" type="button" @onclick="ResetForm">Reset</button>
            </div>
        </div>
    </div>
</EditForm>
@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <SfGrid ID="Grid" @ref="grid" DataSource="@arbeitsberichtSumme" AllowPaging="true"
            AllowSelection="true" AllowReordering="true"
            AllowGrouping="true" AllowResizing="true" Height="500">
        <GridPageSettings PageCount="5"></GridPageSettings>
        <GridTemplates>
            <DetailTemplate>
                @{
                    var arbeitsbericht = (context as ArbeitsberichtDbSummeDto);
                    <SfGrid TValue="ArbeitsscheinDto"
                            DataSource="arbeitsbericht?.Arbeitsscheine"
                            AllowPaging="true">
                        <GridTemplates>
                            <DetailTemplate Context="ascontext">
                                @{
                                    var arbeitsschein = (ascontext as ArbeitsscheinDto);
                                    <table class="detailtable" width="100%">
                                        <colgroup>
                                            <col style="width: 30%;" />
                                            <col style="width: 30%;" />
                                            <col style="width: 40%;" />
                                        </colgroup>
                                        <thead>
                                            <tr>
                                                <th colspan="3" style="font-weight: 500;text-align: center; background-color: #e08e4f;">
                                                    Details
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td style="text-align: center;">
                                                    <strong style="color: #0a76ff;">Monteure:</strong><br>
                                                    <span>@arbeitsschein?.Monteur</span>
                                                </td>
                                                <td style="text-align: center;">
                                                    <strong style="color: #0a76ff;">Anlagen:</strong><br>
                                                    <span>@arbeitsschein?.AnlageName</span>
                                                </td>

                                                <td style="text-align: center;">
                                                    <strong style="color: #0a76ff;">Kurztext:</strong><br>
                                                    <span> @arbeitsschein?.Kurztext</span>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td style="text-align: center;">
                                                    <strong style="color: #0a76ff;">Anzahl Monteure:</strong><br>
                                                    <span>@(arbeitsschein?.MonteurList.Count)</span>
                                                </td>
                                                <td style="text-align: center;">
                                                    <strong style="color: #0a76ff;">Anzahl Anlagen:</strong><br>
                                                    <span>@(arbeitsschein?.FahrzeugList.Count)</span>
                                                </td>
                                                <td style="text-align: center;">
                                                    <strong style="color: #0a76ff;">Preis:</strong><br>
                                                    <span>@(arbeitsschein?.Preis.ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("de-DE")) + " €")</span>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td style="text-align: center;">
                                                    <strong style="color: #0a76ff;">Anteil pro Monteur:</strong><br>
                                                    <span>@(((arbeitsschein?.Positionssumme ?? 0) / (arbeitsschein?.MonteurList?.Count ?? 1)).ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("de-DE")))</span>
                                                </td>
                                                <td style="text-align: center;">
                                                    <strong style="color: #0a76ff;">Anteil pro Anlage:</strong><br>
                                                    <span>@(((arbeitsschein?.Positionssumme ?? 0) / (arbeitsschein?.FahrzeugList?.Count ?? 1)).ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("de-DE")))</span>
                                                </td>
                                                <td style="text-align: center;">
                                                    <strong style="color: #0a76ff;">Positionssumme:</strong><br>
                                                    <span>@(arbeitsschein?.Positionssumme.ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("de-DE")) + " €")</span>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                }
                            </DetailTemplate>
                        </GridTemplates>
                        <GridColumns>
                            <GridColumn Field=@nameof(ArbeitsscheinDto.HALTUNG) HeaderText="Haltung" Width="40"></GridColumn>
                            <GridColumn Field=@nameof(ArbeitsscheinDto.LVPosition) HeaderText="LV-Position" Width="40"></GridColumn>
                            <GridColumn Field=@nameof(ArbeitsscheinDto.Menge) HeaderText="Menge" Width="80"></GridColumn>
                            <GridColumn Field=@nameof(ArbeitsscheinDto.SaniertAm) HeaderText="Ausgeführt am" Width="80" Format="dd.MM.yyyy"></GridColumn>
                            <GridColumn Field=@nameof(ArbeitsscheinDto.Abschlagsrechnung) HeaderText="AR" Width="30"></GridColumn>
                            <GridColumn Field=@nameof(ArbeitsscheinDto.Kolonnenfuehrer) HeaderText="Kolonnenführer" Width="80"></GridColumn>
                            <GridColumn Field=@nameof(ArbeitsscheinDto.AnlageName) HeaderText="Fahrzeug" Width="80"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                }
            </DetailTemplate>
        </GridTemplates>
        <GridColumns>
            <GridColumn Field=@nameof(ArbeitsberichtDbSummeDto.Projektname) HeaderText="Projekt" Width="80"></GridColumn>
        </GridColumns>
    </SfGrid>
    <div class="row mt-3">
        <div class="col-md-12">
            <h5>Gesamtsumme: @(gesamtSumme?.ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("de-DE"))  + " €")</h5>
        </div>
    </div>
}
<style type="text/css" class="cssStyles">
    .deatailTable td {
    font-size: 13px;
    padding: 4px;
    max-width: 0;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    font-weight: normal;
    }

    .e-grid .e-headercell {
        background-color: #a2d6f4;
        color: rgb(3, 2, 2);
    }
</style>

@code {
    private SfGrid<ArbeitsberichtDbSummeDto> grid = new();

    private ArbeitsscheinFormModel formModel = new();

    private ArbeitsberichtProjectsDto berichtProject = new();

    private List<ArbeitsberichtDbSummeDto> arbeitsberichtSumme = new();

    private List<ArbeitsscheinDto> arbeitsscheine = new();

    private List<Project> projects = new();
    private Decimal? gesamtSumme = 0;
    private List<string> ToolbarItems = new List<string>() { "PdfExport" };
    private bool isLoading = false;
    private string base64Image = string.Empty;
    private string projectDb = string.Empty;
    private bool isSchachtEnabled = false;
    private bool IsSaniertAmUsed => formModel.SaniertAm.HasValue;
    private int ComboBoxValue = 1;


    protected override async Task OnInitializedAsync()
    {
        await LoadImage();
    }

    private List<KanalSchacht> kanalSchachtList = new List<KanalSchacht>
    {
        new KanalSchacht { Id = 1, Auswahl = "Kanal" },
        new KanalSchacht { Id = 2, Auswahl = "Schacht" }
    };

    private async Task LoadImage()
    {
        // JS-Modul laden
        var module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/imageHelper.js");

        // Funktion aufrufen
        base64Image = await module.InvokeAsync<string>("getImageAsBase64", "images/logos/logo_oxid.png");
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (string.IsNullOrWhiteSpace(base64Image))
        {
            await LoadImage(); 
        }
        if (!string.IsNullOrWhiteSpace(base64Image))
        {
            string pureBase64 = base64Image.Split(',')[1];

            if (args.Item.Id == "Grid_pdfexport" && grid != null)
            {
                PdfExportProperties ExportProperties = new PdfExportProperties();
                ExportProperties.PdfDetailRowMode = PdfDetailRowMode.Expand;

                List<PdfHeaderFooterContent> HeaderContent = new List<PdfHeaderFooterContent>
                {
                    new PdfHeaderFooterContent() 
                    { 
                        Type = ContentType.Image, Src=pureBase64,
                         Position = new PdfPosition() {X=0, Y = 0 }
                    },
                    new PdfHeaderFooterContent()
                    {
                        Type = ContentType.Text,
                        Value = "Arbeitsbericht",
                        Position = new PdfPosition() {X=300, Y = 0 },
                        Style = new PdfContentStyle() { FontSize = 18, TextBrushColor="#C67878" }
                    },
                    new PdfHeaderFooterContent()
                    {
                        Type = ContentType.Text,
                        Value = "Projekt: " + projectDb,
                        Position = new PdfPosition() {X=300, Y = 30 },
                        Style = new PdfContentStyle() { FontSize = 14, TextBrushColor="#0a76ff" }
                    },
                    new PdfHeaderFooterContent()
                    {
                        Type = ContentType.Text,
                        Value = "Gesamtsumme: " + gesamtSumme?.ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("de-DE")) + " €",
                        Position = new PdfPosition() { X = 500, Y = 35 },
                        Style = new PdfContentStyle()
                        {
                            FontSize = 10,
                            TextBrushColor = "#000000",
                        }
                    }

                };
                PdfHeader Header = new PdfHeader() { FromTop = 0, Height = 80, Contents = HeaderContent };
                ExportProperties.Header = Header;

                await grid.ExportToPdfAsync(ExportProperties);
            }
        }
    }

    public void PDFDetailTemplateHandler(PdfDetailTemplateEventArgs<ArbeitsscheinDto> args)
    {
        var pdfRows = new List<PdfDetailTemplateRow>();
        var data = args.ParentRow.Data;
        args.RowInfo.ColumnCount = 2;
        args.RowInfo.Headers = new List<PdfDetailTemplateRow>()
        {
            new PdfDetailTemplateRow() 
            { 
                Cells = new List<PdfDetailTemplateCell>() 
                { new PdfDetailTemplateCell() 
                    { 
                        Index = 0,
                        CellValue = "Details",
                        ColumnSpan = 2,
                        Style = new PdfThemeStyle() 
                        { 
                            Bold = true,
                            FontColor = "#0A76FF",
                            FontSize = 12
                        }
                    } 
                }
            }
        };
        pdfRows.Add(ProcessPdfRow("Monteure", data.Monteur ?? "N/A", "Kurztext", data.Kurztext ?? "N/A"));
        pdfRows.Add(ProcessPdfRow("Preis", $"{data.Preis.ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("de-DE"))} €", "Positionspreis", $"{data.Positionssumme.ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("de-DE"))} €"));
        pdfRows.Add(ProcessPdfRow("Anzahl Monteure", $"{data.MonteurList.Count}", "Anteil pro Monteur", $"{(data.Positionssumme / (data.MonteurList.Count)).ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("de-DE"))} €"));
        pdfRows.Add(ProcessPdfRow("Anzahl Fahrzeuge", $"{data.FahrzeugList.Count}", "Anteil pro Fahrzeug", $"{(data.Positionssumme / (data.FahrzeugList.Count)).ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("de-DE"))} €"));

        args.RowInfo.Rows = pdfRows;
    }

    PdfDetailTemplateRow ProcessPdfRow(string label1, string value1, string label2, string value2)
    {
        var cells = new List<PdfDetailTemplateCell>();
        cells.Add(new PdfDetailTemplateCell() { CellValue = $"{label1}: {value1}" });
        cells.Add(new PdfDetailTemplateCell() { CellValue = $"{label2}: {value2}" });
        return new PdfDetailTemplateRow() { Cells = cells };            
    }

    private void OnSaniertAmChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            formModel.SaniertAm = date;
            formModel.SaniertAmVon = null;
            formModel.SaniertAmBis = null;
        }
        else
        {
            formModel.SaniertAm = null;
        }
    }

    private async Task LoadArbeitsscheine()
    {
        isLoading = true;

        try
        {
            berichtProject = await ArbeitsscheinService.GetArbeitsberichtMonteurProjects(
                bereich: ComboBoxValue,
                saniertAmVon: formModel.SaniertAmVon,
                saniertAmBis: formModel.SaniertAmBis,
                saniertAm: formModel.SaniertAm,
                monteurname: formModel.Monteurname ?? string.Empty
            );
            arbeitsberichtSumme = berichtProject.ArbeitsberichtProjekt?.ToList() ?? new List<ArbeitsberichtDbSummeDto>();
            arbeitsscheine = arbeitsberichtSumme
                                .Where(b => b.Arbeitsscheine != null)
                                .SelectMany(b => b.Arbeitsscheine!)
                                .ToList();
            gesamtSumme = arbeitsberichtSumme.Sum(b => b.Summe);

            await ToastService.ShowToast($"Arbeitsbericht erfolgreich geladen!", true);
        }
        catch
        {
            await ToastService.ShowToast($"Fehler beim Laden der Arbeitsberichtdaten!", false);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ResetForm()
    {
        formModel = new();
        arbeitsscheine = new();
    }

    public class ArbeitsscheinFormModel : IValidatableObject
    {
        [DataType(DataType.Date)]
        public DateTime? SaniertAmVon { get; set; }

        [DataType(DataType.Date)]
        public DateTime? SaniertAmBis { get; set; }

        [DataType(DataType.Date)]
        public DateTime? SaniertAm { get; set; }

        [Required]
        public string? Monteurname { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (SaniertAmVon.HasValue && SaniertAmBis.HasValue && SaniertAmVon > SaniertAmBis)
            {
                yield return new ValidationResult(
                    "Saniert Am Von darf nicht nach Saniert Am Bis liegen.",
                    new[] { nameof(SaniertAmVon), nameof(SaniertAmBis) });
            }
        }
    }
}

